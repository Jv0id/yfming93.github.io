I"r{<ul id="markdown-toc">
  <li><a href="#vue20nodejsmongodb全栈打造商城系统56章" id="markdown-toc-vue20nodejsmongodb全栈打造商城系统56章">Vue2.0+Node.js+MongoDB全栈打造商城系统（5—6章）</a></li>
  <li><a href="#第5章-es6常用语法" id="markdown-toc-第5章-es6常用语法">第5章 ES6常用语法</a>    <ul>
      <li><a href="#5-1-es6简介" id="markdown-toc-5-1-es6简介">5-1 ES6简介</a></li>
      <li><a href="#5-2-es6常用命令" id="markdown-toc-5-2-es6常用命令">5-2 ES6常用命令</a>        <ul>
          <li><a href="#注意" id="markdown-toc-注意"><strong>注意：</strong></a></li>
        </ul>
      </li>
      <li><a href="#5-3-拓展参数讲解" id="markdown-toc-5-3-拓展参数讲解">5-3 拓展参数讲解</a>        <ul>
          <li><a href="#注意-1" id="markdown-toc-注意-1"><strong>注意：</strong></a></li>
        </ul>
      </li>
      <li><a href="#5-4-promise讲解" id="markdown-toc-5-4-promise讲解">5-4 Promise讲解</a></li>
      <li><a href="#5-5-es6模块化开发讲解" id="markdown-toc-5-5-es6模块化开发讲解">5-5 ES6模块化开发讲解</a>        <ul>
          <li><a href="#说明" id="markdown-toc-说明"><strong>说明:</strong></a></li>
          <li><a href="#优秀问答" id="markdown-toc-优秀问答"><strong>优秀问答：</strong></a></li>
        </ul>
      </li>
      <li><a href="#5-6-amdcmdcommonjs和es6差异" id="markdown-toc-5-6-amdcmdcommonjs和es6差异">5-6 AMD、CMD、CommonJS和ES6差异</a></li>
    </ul>
  </li>
  <li><a href="#第6章-商品列表模块实现" id="markdown-toc-第6章-商品列表模块实现">第6章 商品列表模块实现</a>    <ul>
      <li><a href="#6-1-商品列表组件拆分" id="markdown-toc-6-1-商品列表组件拆分">6-1 商品列表组件拆分</a>        <ul>
          <li><a href="#说明-1" id="markdown-toc-说明-1"><strong>说明：</strong></a></li>
        </ul>
      </li>
      <li><a href="#6-2-商品列表数据渲染实现" id="markdown-toc-6-2-商品列表数据渲染实现">6-2 商品列表数据渲染实现</a>        <ul>
          <li><a href="#说明-2" id="markdown-toc-说明-2"><strong>说明：</strong></a></li>
        </ul>
      </li>
      <li><a href="#6-3-实现图片懒加载" id="markdown-toc-6-3-实现图片懒加载">6-3 实现图片懒加载</a></li>
    </ul>
  </li>
</ul>

<h1 id="vue20nodejsmongodb全栈打造商城系统56章">Vue2.0+Node.js+MongoDB全栈打造商城系统（5—6章）</h1>
<p>用前端技术开发的商城整站<br />
项目已部署上线，你可抢先体验：<a href="http://imooc.51purse.com/">http://imooc.51purse.com/</a><br />
收费项目介绍：<a href="http://coding.imooc.com/class/113.html">http://coding.imooc.com/class/113.html</a></p>

<h1 id="第5章-es6常用语法">第5章 ES6常用语法</h1>
<h2 id="5-1-es6简介">5-1 ES6简介</h2>
<p><img src="https://yfmingo.oss-cn-beijing.aliyuncs.com/images/cu2Uuq.jpg" alt="" /></p>

<h2 id="5-2-es6常用命令">5-2 ES6常用命令</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;ES6Demo演示&lt;/title&gt;
  &lt;style&gt;
    .log {
      background-color: black;
      color: white;
      padding: 10px 20px;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h2&gt;ES6Demo演示&lt;/h2&gt;
  &lt;div id="log" class="log"&gt;&lt;/div&gt;

  &lt;script&gt;
    //模板语言
    var str = `
    console.log("a"+a);
    var a = 1;
    console.log("b"+b);
    let b = 2;
    ------------------
    function user() {
      var a = 1;
    }
    console.log("a"+a);
    var a = 1;
    -------------------
    //块级作用域
    {
      let a = 1;
      var b = 2;
    }

    console.log("b:"+b);
    console.log("a:"+a); //errorr
    ---------------------
     let a  = 1;
    a = 2;
    const  b = 2 ;
//    b  = 3;  //error ES6.html?_ijt=f1b25lpo249eskl9mi7gbhji:46 Uncaught TypeError: Assignment to constant variable.
    ------------------------
    const  c = {d:1};
    c.d = 2;
    c.e = 3;
//    c = {f:1}; // error
    -------------
    // 模板语言  可以直接拼接 字符串和变量
//    let  userName = "Jack";
//    printLog(\`I'm $删除这5字{userName}\`);  //中文是分割作用看时自己删除
    --------------
    function es5(flag) {
      if (flag) {
        return " es5 true";
      }else {
        return "es5 error";
      }
    }
    console.log(es5());
    // ES6默认参数  开发中可以进行容错处理
    function es6(num1, num2 =4) {
      return num1 + num2;
    }
    console.log(es6(7)); //结果11 即使少传了一个参数也不会报错
    ---------------------------------
    //箭头函数演示
    var  arr = [3, 6, 9];
    //遍历数组 以前写法
    var  newArr = arr.map(function (item) {
      return item + 2;
    })
    console.log(newArr);

    // ES6箭头函数 遍历数组  当表达式只有一行时可以 直接=&gt;接表达式。否则要用{}包着
    var  newArr1 = arr.map((item)=&gt;item+2);
    console.log("newArr1:"+ newArr1);

    `;
    printLog(str);
    //数组的解构
    var [a,b,c] = [3,8,10]; //数组的分解

    var [x,y,z] = "Vue";  //字符串的分解
    console.log(`x:${x},y:${y},z:${z}`);

    var {m,n} = {m:3,n:4};  //对象的解构，对key进行拆分 (m和n的顺序不同也可以)
    console.log(`m:${m},n:${n}`);

    //函数解构
    function sum([x,y]) {
      return x + y;
    }

    var  total = sum([2,8]);
    console.log(`total:${total}`);
    
    function printLog(str) {
      document.getElementById("log").innerText = str;
    }
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<h3 id="注意"><strong>注意：</strong></h3>
<ul>
  <li>const 声明的普通变量将会是常量，它的值不能改变，如果用 const 声明一个对象类型，那么他的指针或者说是内存地址是常量，具体的属性值可以改变</li>
  <li>模板语言用的不是单引号‘ ’，而是esc下面的反引号 `</li>
  <li>{} 块级作用域。var 有变量提升的作用；let 没有变量提升的作用 是块级变量；var 函数级作用域，在函数中有效； let const 块级作用域，大括号中有效，不提升， const 定义常量，就不可以修改。 const 声明的内存中的数据不能修改，基本数据，则值不可改变，对象，则指向的对象不可改变。 var 会造成内存泄漏，建议使用let声明变量。 模板语言中输出变量名 ·膜拜语言+${变量名}· 膜拜语言可以不可以引入函数结果 声明函数的默认参数。</li>
  <li>ES6 的写法
    <ul>
      <li>自定义函数  <code class="language-plaintext highlighter-rouge">xxx() {...}</code></li>
      <li>回调函数 <code class="language-plaintext highlighter-rouge">(parameter)=&gt; {...}</code></li>
    </ul>
  </li>
  <li>非ES6的写法
    <ul>
      <li>自定义函数 <code class="language-plaintext highlighter-rouge">function xxx() {...}</code></li>
      <li>回调函数  <code class="language-plaintext highlighter-rouge">function (parameter) {...}</code></li>
    </ul>
  </li>
</ul>

<h2 id="5-3-拓展参数讲解">5-3 拓展参数讲解</h2>
<p><img src="https://yfmingo.oss-cn-beijing.aliyuncs.com/images/cW3M11.jpg" alt="" /></p>

<p><code class="language-plaintext highlighter-rouge">demo/ES6-2.html</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;ES6-2Demo演示&lt;/title&gt;

&lt;/head&gt;
&lt;body&gt;
  &lt;h2&gt;ES6-2Demo演示&lt;/h2&gt;
  &lt;script&gt;
    function sum(x,y,z) {
      let total = 0;
      if (x) total += x;
      if (y) total += y;
      if (z) total += z;
      console.log(`total:${total}`);
    }
    sum(2,"",8);

    function sum2(...m) { //动态参数三个点
      let total2 = 0;
      for (var i of m) {
        total2 += i;
      }
      console.log(`total2:${total2}`);  //total2:12
    }
    sum2(2,2,4,4);

    //ES6写法
    let  sum3 = (...m)=&gt;{
      let total2 = 0;
      for (var i of m) {
        total2 += i;
      }
      console.log(`total3:${total2}`); //total3:12
    };
    sum3(2,2,4,4);

    //数组扩展
    var [x,y] = [4,8];
    console.log(...[4,7]); //4 7

    var arr1 = [1,3]; var arr2 = [4,5];
    console.log("concat:"+arr1.concat(arr2)); //concat:1,3,4,5
    console.log("concat2:"+[...arr1,...arr2]); //concat2:1,3,4,5

    var [e,...f] = [2,3,4,5];
    console.log("f:"+f); //f:3,4,5

    let [a,b,c] = "ES6";
    console.log(`a:${a},b:${b},c:${c}`); //a:E,b:S,c:6

    let xy = [..."ES6"];
    console.log(`xy:${xy}`);//xy:E,S,6
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<h3 id="注意-1"><strong>注意：</strong></h3>
<ul>
  <li>…运算符
    <ul>
      <li>1） …和参数一起代表动态参数，不确定传参个数可使用…代替；</li>
      <li>2） …和数组一起，会拆解数组成每单个元素；</li>
      <li>3） …三个点和数组一起解构，将代表动态数组；</li>
      <li>4） …和字符串一起，将拆解字符串</li>
    </ul>
  </li>
  <li>…进行数据合并 <code class="language-plaintext highlighter-rouge">var sum=[...arr1,...arr2]</code></li>
  <li>数组的遍历另一种方式是通过 of 语法 例子： <code class="language-plaintext highlighter-rouge">for(var i of array){}</code> 与<code class="language-plaintext highlighter-rouge">java</code>中<code class="language-plaintext highlighter-rouge">for each</code>等价</li>
</ul>

<h2 id="5-4-promise讲解">5-4 Promise讲解</h2>

<p><code class="language-plaintext highlighter-rouge">demo/Promise.js</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let checkLogin = function () {
  return new Promise(function (resolve,reject) {
    let  falg = document.cookie.indexOf("userId")&gt; -1? true: false;
    if (falg = true) {
      resolve({
        satatus:0,
        result:true
      })
    }else  {
      reject("error");
    }
  })
};

let getUserInfo = ()=&gt;{
  return new Promise((resolve,reject)=&gt;{
    let  userInfo = {
      userId: "101"
    }
    resolve(userInfo);
  });
};

checkLogin().then((res)=&gt;{
  if (res.satatus == 0) {
    console.log("login success")
    return getUserInfo();
  }
}).catch((error)=&gt;{
  console.log(`errs:${error}`)
}).then((res2)=&gt;{
  console.log(`userId:${res2.userId}`); //userId:101
})

Promise.all([checkLogin(),getUserInfo()]).then(([res1,res2])=&gt;{
  console.log(`res1:${res1.satatus} ; res2:${res2.userId}`); //res1:0 ; res2:101

})
</code></pre></div></div>

<p>直接写在 HTML 中会报错 ES6 语法错误,故采取引用js文件:<br />
<code class="language-plaintext highlighter-rouge">Promise.html</code>：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Promise&lt;/title&gt;
    &lt;script src="Promise.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<h2 id="5-5-es6模块化开发讲解">5-5 ES6模块化开发讲解</h2>

<p>代码演示 import 和 export</p>

<p><code class="language-plaintext highlighter-rouge">main.js</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// The Vue build version to load with the `import` command
// (runtime-only or standalone) has been set in webpack.base.conf with an alias.
import Vue from 'vue'
import App from './App'
import {router} from './router' //等同于下面一行
// import {router} from {router:router}

// import {sum,minus} from './util' //或者如下 minus和sum封装在util中
import * as util from './util'

Vue.config.productionTip = false

//切换到工作空间。 cnpm run dev
// console.log(`sum:${sum(1,7)}`); //sum:8
// console.log(`minus:${minus(8,1)}`); //minus:7  //或者如下
console.log(`sum:${util.sum(1,7)}`); //sum:8
console.log(`minus:${util.minus(8,1)}`); //minus:7

/* eslint-disable no-new */
new Vue({
  // el: '#app',
  router,
  template: '&lt;App/&gt;',
  components: { App }
  // render: function (h) {
  //   return h(App);
  // }  //等同于上面两行
}).$mount("#app"); // .$mount("#app")挂载 和 el：的效果是一样的
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">util.js</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export let sum = (x,y)=&gt; {
  return x + y;
}

export let minus = (m,n)=&gt; {
  return m - n;
}
</code></pre></div></div>

<h3 id="说明"><strong>说明:</strong></h3>
<ul>
  <li>三种挂载方式：
    <ul>
      <li>1）通过el属性设置挂载对象选择器</li>
      <li>2）通过<code class="language-plaintext highlighter-rouge">$mount（'选择器'）</code>挂载</li>
      <li>3）通过底层封装的render方法</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">export let router = new Router({XXXXX})</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  import {router} from './router' //等同于下面一行
  // import {router} from {router:router}
</code></pre></div>    </div>
  </li>
  <li>在使用过程中可以通过<code class="language-plaintext highlighter-rouge">import</code>函数进行异步加载<code class="language-plaintext highlighter-rouge">js</code>文件。 实际上<code class="language-plaintext highlighter-rouge">import</code>并不是异步加载，是按需加载，通过<code class="language-plaintext highlighter-rouge">import</code>可以实现按需加载。如:<code class="language-plaintext highlighter-rouge">import(文件地址)</code></li>
</ul>

<h3 id="优秀问答"><strong>优秀问答：</strong></h3>
<ul>
  <li>
    <p><strong>问：</strong> 想问一下为什么我们在<code class="language-plaintext highlighter-rouge">&lt;script&gt;</code>中使用<code class="language-plaintext highlighter-rouge">export default</code>呢，比如</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  export default {
      props: {
  ......
</code></pre></div>    </div>

    <p>这样，一个子组件肯定是包括前面的<code class="language-plaintext highlighter-rouge">template</code>的，那为什么不从<code class="language-plaintext highlighter-rouge">template</code>前面开始<code class="language-plaintext highlighter-rouge">export default</code>，而是在<code class="language-plaintext highlighter-rouge">&lt;script&gt;</code>下开始<code class="language-plaintext highlighter-rouge">export default</code></p>

    <ul>
      <li><strong>答:</strong> 这个问题问得很好，但是你忽略了一个问题，这是一个<code class="language-plaintext highlighter-rouge">.vue</code>文件，不是一个<code class="language-plaintext highlighter-rouge">js</code>文件，这种格式<code class="language-plaintext highlighter-rouge">Vue</code>和<code class="language-plaintext highlighter-rouge">es6</code>根本不认识，它需要通过<code class="language-plaintext highlighter-rouge">Vue-loader</code>进行加载解析，实际上<code class="language-plaintext highlighter-rouge">Vue loader</code>底层会按照你说的格式进行封装，最后扔给<code class="language-plaintext highlighter-rouge">Vue</code>解析。</li>
    </ul>
  </li>
</ul>

<h2 id="5-6-amdcmdcommonjs和es6差异">5-6 AMD、CMD、CommonJS和ES6差异</h2>
<p><img src="https://yfmingo.oss-cn-beijing.aliyuncs.com/images/M2uXYA.jpg" alt="" /><br />
<img src="https://yfmingo.oss-cn-beijing.aliyuncs.com/images/HmT1Rc.jpg" alt="" /><br />
<img src="https://yfmingo.oss-cn-beijing.aliyuncs.com/images/4H04bK.jpg" alt="" /><br />
<img src="https://yfmingo.oss-cn-beijing.aliyuncs.com/images/uubCWY.jpg" alt="" /></p>

<ul>
  <li><strong>AMD：</strong>是<code class="language-plaintext highlighter-rouge">requirejs</code>在推广过程中对模块定义的规范化产出(异步模块) 特点：依赖前置,异步</li>
  <li><strong>CMD：</strong>是<code class="language-plaintext highlighter-rouge">seajs</code>在推广过程中对模块定义的规范化产出（同步模块） 特点：依赖就近，在什么时候使用就在时候时候引入</li>
  <li><strong>Commonjs：</strong><code class="language-plaintext highlighter-rouge">nodejs</code>在推广过程中对模块定义的规范</li>
</ul>

<h1 id="第6章-商品列表模块实现">第6章 商品列表模块实现</h1>
<h2 id="6-1-商品列表组件拆分">6-1 商品列表组件拆分</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
	&lt;div&gt;
    &lt;nav-header&gt;&lt;/nav-header&gt;
    &lt;nav-bread&gt;
      &lt;span&gt;Goods&lt;/span&gt;
    &lt;/nav-bread&gt;
    &lt;div class="accessory-result-page accessory-page"&gt;
      &lt;div class="container"&gt;
        &lt;div class="filter-nav"&gt;
          &lt;span class="sortby"&gt;Sort by:&lt;/span&gt;
          &lt;a href="javascript:void(0)" class="default cur"&gt;Default&lt;/a&gt;
          &lt;a href="javascript:void(0)" class="price"&gt;Price &lt;svg class="icon icon-arrow-short"&gt;&lt;use xlink:href="#icon-arrow-short"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/a&gt;
          &lt;a href="javascript:void(0)" class="filterby stopPop"&gt;Filter by&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="accessory-result"&gt;
          &lt;!-- filter --&gt;
          &lt;div class="filter stopPop" id="filter"&gt;
            &lt;dl class="filter-price"&gt;
              &lt;dt&gt;Price:&lt;/dt&gt;
              &lt;dd&gt;&lt;a href="javascript:void(0)"&gt;All&lt;/a&gt;&lt;/dd&gt;
              &lt;dd&gt;
                &lt;a href="javascript:void(0)"&gt;0 - 100&lt;/a&gt;
              &lt;/dd&gt;

            &lt;/dl&gt;
          &lt;/div&gt;

          &lt;!-- search result accessories list --&gt;
          &lt;div class="accessory-list-wrap"&gt;
            &lt;div class="accessory-list col-4"&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div class="pic"&gt;
                    &lt;a href="#"&gt;&lt;img src="static/1.jpg" alt=""&gt;&lt;/a&gt;
                  &lt;/div&gt;
                  &lt;div class="main"&gt;
                    &lt;div class="name"&gt;XX&lt;/div&gt;
                    &lt;div class="price"&gt;999&lt;/div&gt;
                    &lt;div class="btn-area"&gt;
                      &lt;a href="javascript:;" class="btn btn--m"&gt;加入购物车&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/li&gt;

              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;nav-footer&gt;&lt;/nav-footer&gt;
	&lt;/div&gt;
&lt;/template&gt;

&lt;style &gt;
&lt;/style&gt;

&lt;script &gt;
  import './../assets/css/base.css'
  import './../assets/css/product.css'
  import NavHeader from './NavHeader.vue'
  import NavFooter from './NavFooter.vue'
  import NavBread from './NavBread.vue'

  export default {
		data (){
			return {
				msg:'hello Vue!'
			}
		},
    components:{
		  NavHeader,
      NavFooter,
      NavBread
    }
	}
&lt;/script&gt;
</code></pre></div></div>

<h3 id="说明-1"><strong>说明：</strong></h3>
<ul>
  <li>
    <p><strong>组件拆分:</strong> 将主项目拆分成多个组件：<code class="language-plaintext highlighter-rouge">NavBread.vue</code>、<code class="language-plaintext highlighter-rouge">NavFooter.vue</code>、<code class="language-plaintext highlighter-rouge">NavHeader.vue</code>。</p>

    <p>其中的类似 <code class="language-plaintext highlighter-rouge">&lt;nav-header&gt;&lt;/nav-header&gt;</code>就是引用组件</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">assets</code>里面的静态资源往往作用于组件，而<code class="language-plaintext highlighter-rouge">static</code>则考虑资源本身。比如<code class="language-plaintext highlighter-rouge">assets</code>里面的<code class="language-plaintext highlighter-rouge">img</code>通过<code class="language-plaintext highlighter-rouge">webpack</code>打包时文件过小就会转换为<code class="language-plaintext highlighter-rouge">base64</code>的形式，而<code class="language-plaintext highlighter-rouge">static</code>里面的<code class="language-plaintext highlighter-rouge">img</code>不会</li>
  <li><code class="language-plaintext highlighter-rouge">slot</code>插槽可能会经常使用到，详细可参考官网文档，简单说组件和页面都通过组件用<code class="language-plaintext highlighter-rouge">slot</code>标签、页面用<code class="language-plaintext highlighter-rouge">slot</code>属性的方式呼应，给<code class="language-plaintext highlighter-rouge">slot</code>标签赋上<code class="language-plaintext highlighter-rouge">name</code>属性,再在页面中给<code class="language-plaintext highlighter-rouge">slot</code>属性赋上对应的值，可区分多个的情况</li>
</ul>

<h2 id="6-2-商品列表数据渲染实现">6-2 商品列表数据渲染实现</h2>
<p><code class="language-plaintext highlighter-rouge">GoodList.vue</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
	&lt;div&gt;
    &lt;nav-header&gt;&lt;/nav-header&gt;
    &lt;nav-bread&gt;
      &lt;span&gt;Goods&lt;/span&gt;
    &lt;/nav-bread&gt;
    &lt;div class="accessory-result-page accessory-page"&gt;
      &lt;div class="container"&gt;
        &lt;div class="filter-nav"&gt;
          &lt;span class="sortby"&gt;Sort by:&lt;/span&gt;
          &lt;a href="javascript:void(0)" class="default cur"&gt;Default&lt;/a&gt;
          &lt;a href="javascript:void(0)" class="price"&gt;Price &lt;svg class="icon icon-arrow-short"&gt;&lt;use xlink:href="#icon-arrow-short"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/a&gt;
          &lt;a href="javascript:void(0)" class="filterby stopPop"&gt;Filter by&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="accessory-result"&gt;
          &lt;!-- filter --&gt;
          &lt;div class="filter stopPop" id="filter"&gt;
            &lt;dl class="filter-price"&gt;
              &lt;dt&gt;Price:&lt;/dt&gt;
              &lt;dd&gt;&lt;a href="javascript:void(0)"&gt;All&lt;/a&gt;&lt;/dd&gt;
              &lt;dd&gt;
                &lt;a href="javascript:void(0)"&gt;0 - 100&lt;/a&gt;
              &lt;/dd&gt;

            &lt;/dl&gt;
          &lt;/div&gt;

          &lt;!-- search result accessories list --&gt;
          &lt;div class="accessory-list-wrap"&gt;
            &lt;div class="accessory-list col-4"&gt;
              &lt;ul&gt;
                &lt;li v-for="(item,index) in goodslist"&gt;
                  &lt;div class="pic"&gt;
                    &lt;a href="#"&gt;&lt;img v-bind:src="'static/' + item.productImg" alt=""&gt;&lt;/a&gt;
                  &lt;/div&gt;
                  &lt;div class="main"&gt;
                    &lt;div class="name"&gt;&lt;/div&gt;
                    &lt;div class="price"&gt;&lt;/div&gt;
                    &lt;div class="btn-area"&gt;
                      &lt;a href="javascript:;" class="btn btn--m"&gt;加入购物车&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/li&gt;

              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;nav-footer&gt;&lt;/nav-footer&gt;
	&lt;/div&gt;
&lt;/template&gt;

&lt;style &gt;
&lt;/style&gt;

&lt;script &gt;
  import './../assets/css/base.css'
  import './../assets/css/product.css'
  import NavHeader from './NavHeader.vue'
  import NavFooter from './NavFooter.vue'
  import NavBread from './NavBread.vue'
  import axios from 'axios'


  export default {
		data (){
			return {
				goodslist:[]
			}
		},
    components:{
		  NavHeader,
      NavFooter,
      NavBread
    },
    mounted:function () {
        this.getGoodsList();
    },
    methods:{
        getGoodsList:function () {
            axios.get("/goods").then((result)=&gt;{
              var  res = result.data;
              this.goodslist = res.result;
            })
        }
    }
	}
&lt;/script&gt;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dev-server.js</code>新增:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var app = express()
        .
        .
        .
var router = express.Router();
var  goodsData = require('./../mock/goods.json');

router.get("/goods",function (req,res,next) {
    res.json(goodsData);
});
app.use(router);
        .
        .
        .
var compiler = webpack(webpackConfig)
</code></pre></div></div>

<h3 id="说明-2"><strong>说明：</strong></h3>
<ul>
  <li><strong>问：</strong>前面那节讲<code class="language-plaintext highlighter-rouge">AMD</code>、<code class="language-plaintext highlighter-rouge">CMD</code>、<code class="language-plaintext highlighter-rouge">commonJS</code>的时候，提到了<code class="language-plaintext highlighter-rouge">require</code>的写法，本章这里的<code class="language-plaintext highlighter-rouge">require</code>属于哪一种用法呢，在<code class="language-plaintext highlighter-rouge">node</code>里面，是<code class="language-plaintext highlighter-rouge">commonJS</code>吗？但是<code class="language-plaintext highlighter-rouge">json</code>文件没有<code class="language-plaintext highlighter-rouge">model.export</code>导出，不太明白
    <ul>
      <li><strong>答:</strong> <code class="language-plaintext highlighter-rouge">var goodsData = require(...)</code> <code class="language-plaintext highlighter-rouge">Node</code>加载<code class="language-plaintext highlighter-rouge">js</code>必须是<code class="language-plaintext highlighter-rouge">common</code>规范，否则拿不到数据。它不仅仅可以抓取<code class="language-plaintext highlighter-rouge">js</code>，也可以加载<code class="language-plaintext highlighter-rouge">json</code>等等格式的文件，加载非<code class="language-plaintext highlighter-rouge">js</code>后缀的文件时则直接缓存到内存中。它不同于<code class="language-plaintext highlighter-rouge">js</code>文件</li>
    </ul>
  </li>
</ul>

<h2 id="6-3-实现图片懒加载">6-3 实现图片懒加载</h2>
<p><code class="language-plaintext highlighter-rouge">GoodsList.vue</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;template&gt;
	&lt;div&gt;
    &lt;nav-header&gt;&lt;/nav-header&gt;
    &lt;nav-bread&gt;
      &lt;span&gt;Goods&lt;/span&gt;
    &lt;/nav-bread&gt;
    &lt;div class="accessory-result-page accessory-page"&gt;
      &lt;div class="container"&gt;
        &lt;div class="filter-nav"&gt;
          &lt;span class="sortby"&gt;Sort by:&lt;/span&gt;
          &lt;a href="javascript:void(0)" class="default cur"&gt;Default&lt;/a&gt;
          &lt;a href="javascript:void(0)" class="price"&gt;Price &lt;svg class="icon icon-arrow-short"&gt;&lt;use xlink:href="#icon-arrow-short"&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/a&gt;
          &lt;a href="javascript:void(0)" class="filterby stopPop" v-on:click="showFilerPop"&gt;Filter by&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="accessory-result"&gt;
          &lt;!-- filter --&gt;
          &lt;div class="filter stopPop" id="filter" v-lazy="{'filterby-show':filerBy}"&gt;
            &lt;dl class="filter-price"&gt;
              &lt;dt&gt;Price:&lt;/dt&gt;
              &lt;dd&gt;&lt;a href="javascript:void(0)" :class="{'cur':priceCheck=='all'}" @click="setPriceCheck('all')"&gt;All&lt;/a&gt;&lt;/dd&gt;
              &lt;dd v-for="(price,index) in priceFilter"&gt;
                &lt;a href="javascript:void(0)" @click="setPriceCheck(index)" :class="{'cur':priceCheck == index}"&gt; - &lt;/a&gt;
              &lt;/dd&gt;

            &lt;/dl&gt;
          &lt;/div&gt;

          &lt;!-- search result accessories list --&gt;
          &lt;div class="accessory-list-wrap"&gt;
            &lt;div class="accessory-list col-4"&gt;
              &lt;ul&gt;
                &lt;li v-for="(item,index) in goodslist"&gt;
                  &lt;div class="pic"&gt;
                    &lt;a href="#"&gt;&lt;img v-bind:src="'static/' + item.productImg" alt=""&gt;&lt;/a&gt;
                  &lt;/div&gt;
                  &lt;div class="main"&gt;
                    &lt;div class="name"&gt;&lt;/div&gt;
                    &lt;div class="price"&gt;&lt;/div&gt;
                    &lt;div class="btn-area"&gt;
                      &lt;a href="javascript:;" class="btn btn--m"&gt;加入购物车&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/li&gt;

              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="md-overlay" v-show="overLayFlag" @click="closePop"&gt;&lt;/div&gt;
    &lt;nav-footer&gt;&lt;/nav-footer&gt;
	&lt;/div&gt;
&lt;/template&gt;

&lt;style &gt;
&lt;/style&gt;

&lt;script &gt;
  import './../assets/css/base.css'
  import './../assets/css/product.css'
  import NavHeader from './NavHeader.vue'
  import NavFooter from './NavFooter.vue'
  import NavBread from './NavBread.vue'
  import axios from 'axios'


  export default {
		data (){
			return {
				goodslist:[],
        priceFilter:[
          {
            startPrice:'0.00',
            endPrice:'500.00'
          },
          {
            startPrice:'500.00',
            endPrice:'1000.00'
          },
          {
            startPrice:'1000.00',
            endPrice:'2000.00'
          },
        ],
        priceCheck:'all',   //价格选中的状态
        filerBy:false,      //小屏幕价格菜单显示
        overLayFlag:false   //遮罩显示

			}
		},
    components:{
		  NavHeader,
      NavFooter,
      NavBread
    },
    mounted:function () {
        this.getGoodsList();
    },
    methods:{
        getGoodsList:function () {
            axios.get("/goods").then((result)=&gt;{
              var  res = result.data;
              this.goodslist = res.result;
            })
        },
        showFilerPop() {
           this.filerBy = true;
           this.overLayFlag = true;

        },
        closePop(){
          this.filerBy = false;
          this.overLayFlag = false;
        },
        setPriceCheck(index){
           this.priceCheck = index;
           this.closePop();
        }
    }
	}
&lt;/script&gt;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">main.js</code>中新增懒加载插件：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import VueLazyLoad from 'vue-lazyload'

Vue.use(VueLazyLoad,{
  loading:"/static/loading-svg/loading-bars.svg"
})
</code></pre></div></div>

:ET