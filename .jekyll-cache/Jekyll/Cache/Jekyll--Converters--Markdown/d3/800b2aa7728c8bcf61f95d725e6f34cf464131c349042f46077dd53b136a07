I"Dw<ul id="markdown-toc">
  <li><a href="#说明" id="markdown-toc-说明">说明：</a></li>
  <li><a href="#引用" id="markdown-toc-引用">引用：</a></li>
  <li><a href="#原文如下" id="markdown-toc-原文如下">原文如下：</a></li>
</ul>

<h2 id="说明">说明：</h2>

<p>个人觉得这篇iOS的代码规范很好，网上的大佬写的基本完善了，遂转载备份以防止后期链接挂了。</p>

<p>同时认为原文不完善的一个地方如下：</p>

<p>在 if语句模块的第四小点<br /></p>

<p><big> <strong>if语句</strong> </big>  <br />
  <strong>4. 条件语句的判断应该是变量在左，常量在右</strong> <br />
作者提到</p>
<blockquote>
  <p>不推荐这样写：</p>
</blockquote>

<blockquote>
  <p>if ( 6 == count) { <br /><br />
}</p>
</blockquote>

<p>其实我个人认为是必须这样的写的。。。<br /><br />
因为在if语句判断中，如果判断条件左边是常量的话，优点如下：</p>

<ul>
  <li>当粗心少写一个 <code class="language-plaintext highlighter-rouge">=</code> 号时。此时就变成赋值操作，这时的意义就是将一个变量赋值给一个常量。这种情况编译器会报错给我们提示。</li>
  <li>反之，常量在右边的话，少写 <code class="language-plaintext highlighter-rouge">=</code> 号时编译器完全不会提示任何错误。此时的判断逻辑就完全变成先赋值，然后再判断了。意义就完全不同了。也给后期的查错带来不方便。</li>
</ul>

<p>原文链接：<a href="https://knightsj.github.io/2017/06/14/iOS%20%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/">iOS代码规范</a></p>

<p>这篇iOS代码规范还是非常不错的。推荐iOS开发人员看。</p>

<h2 id="引用">引用：</h2>

<blockquote>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>写出逻辑深奥的代码并不牛逼。
写出别人能轻易看懂而且容易维护的代码才牛逼。
</code></pre></div>  </div>
</blockquote>

<p><br /></p>

<h1 id="原文如下">原文如下：</h1>
<p><br /></p>

<p>这篇规范一共分为三个部分：</p>
<ol>
<li>核心原则：介绍了这篇代码规范所遵循的核心原则。</li>
<li>通用规范：不局限于iOS的通用性的代码规范（使用C语言和Swift语言）。</li>
<li>iOS规范：仅适用于iOS的代码规范（使用Objective-C语言）。</li>
</ol>
<h1 id="-">一. 核心原则</h1>
<h2 id="-">原则一：代码应该简洁易懂，逻辑清晰</h2>
<p>因为软件是需要人来维护的。这个人在未来很可能不是你。所以首先是为人编写程序，其次才是计算机：</p>
<ul>
<li>不要过分追求技巧，降低程序的可读性。</li>
<li>简洁的代码可以让bug无处藏身。要写出明显没有bug的代码，而不是没有明显bug的代码。</li>
</ul>
<h2 id="-">原则二：面向变化编程，而不是面向需求编程。</h2>
<p>需求是暂时的，只有变化才是永恒的。<br />本次迭代不能仅仅为了当前的需求，写出扩展性强，易修改的程序才是负责任的做法，对自己负责，对公司负责。</p>
<h2 id="-">原则三：先保证程序的正确性，防止过度工程</h2>
<p>过度工程（over-engineering）：在正确可用的代码写出之前就过度地考虑扩展，重用的问题，使得工程过度复杂。<br />引用《<a href="https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2F7645a5ea7f46" target="_blank" rel="nofollow noopener noreferrer">王垠：编程的智慧</a>》里的话：</p>
<blockquote>
<ol>
<li>先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。</li>
<li>先写出可用的代码，反复推敲，再考虑是否需要重用的问题。</li>
<li>先写出可用，简单，明显没有bug的代码，再考虑测试的问题。</li>
</ol>
</blockquote>

<h1 id="-">二. 通用规范</h1>
<h2 id="-">关于大括号</h2>
<hr />

<ul>
<li>控制语句(if,for,while,switch)中，大括号开始与行尾</li>
<li>函数中，大括号要开始于行首</li>
</ul>
<p>推荐这样写：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>
 <span>//控制语句</span>
white(someCondition){

}

<span>//函数</span>
<span class="hljs-keyword">void</span> function(param1,param2)
{

}</code></pre>
</div>

<h2 id="-">运算符</h2>
<hr />

<h3 id="1-">1. 运算符与变量之间的间隔</h3>
<h4 id="1-1-">1.1  一元运算符与变量之间没有空格：</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>
!bValue
~iValue
++iCount
*strSource
&amp;fSum
</code></pre>
</div>

<h4 id="1-2-">1.2 二元运算符与变量之间必须有空格</h4>
<div class="highlighter-rouge"><pre class="highlight"><code>fWidth = <span class="hljs-number">5</span> + <span class="hljs-number">5</span>;
fLength = fWidth * <span class="hljs-number">2</span>;
fHeight = fWidth + fLength;
<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)</code></pre>
</div>
<h3 id="2-">2. 多个不同的运算符同时存在时应该使用括号来明确优先级</h3>
<p>在多个不同的运算符同时存在的时候应该合理使用括号，不要盲目依赖操作符优先级。<br />因为有的时候不能保证阅读你代码的人就一定能了解你写的算式里面所有操作符的优先级。</p>
<p>来看一下这个算式：2 &lt;&lt; 2 + 1 * 3 - 4</p>
<p>这里的<code>&lt;&lt;</code>是移位操作直观上却很容易认为它的优先级很高，所以就把这个算式误认为：(2 &lt;&lt; 2) + 1 * 3 - 4</p>
<p>但事实上，它的优先级是比加减法还要低的，所以该算式应该等同于：2 &lt;&lt; 2 + 1 * 3 - 4。<br />所以在以后写这种复杂一点的算式的时候，尽量多加一点括号，避免让其他人误解（甚至是自己）。</p>
<h2 id="-">变量</h2>
<hr />

<h3 id="1-">1. 一个变量有且只有一个功能，尽量不要把一个变量用作多种用途</h3>
<h3 id="2-">2. 变量在使用前应初始化，防止未初始化的变量被引用</h3>
<h3 id="3-">3. 局部变量应该尽量接近使用它的地方</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">someFunction</span><span class="hljs-params">()</span></span> 
{

  <span class="hljs-keyword">let</span> index = ...;
  <span>//Do something With index</span>

  ...
  ...

  <span class="hljs-keyword">let</span> <span class="hljs-built_in">count</span> = ...;
  <span>//Do something With count</span>

}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">someFunction</span><span class="hljs-params">()</span></span> 
{

  <span class="hljs-keyword">let</span> index = ...;
  <span class="hljs-keyword">let</span> <span class="hljs-built_in">count</span> = ...;
  <span>//Do something With index</span>

  ...
  ...

  <span>//Do something With count</span>
}</code></pre>
</div>
<h2 id="if-">if语句</h2>
<hr />

<h3 id="1-">1. 必须列出所有分支（穷举所有的情况），而且每个分支都必须给出明确的结果。</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">var</span> hintStr;
<span class="hljs-keyword">if</span> (<span class="hljs-built_in">count</span> &lt; <span class="hljs-number">3</span>) {
  hintStr = <span class="hljs-string">"Good"</span>;
} <span class="hljs-keyword">else</span> {
  hintStr = <span class="hljs-string">""</span>;
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">var</span> hintStr;
<span class="hljs-keyword">if</span> (<span class="hljs-built_in">count</span> &lt; <span class="hljs-number">3</span>) {
 hintStr = <span class="hljs-string">"Good"</span>;
}</code></pre>
</div>
<h3 id="2-return-">2. 不要使用过多的分支，要善于使用return来提前返回错误的情况</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">void</span>)someMethod 
{ 
  <span class="hljs-keyword">if</span> (!goodCondition) {
    <span class="hljs-keyword">return</span>;
  }
  <span>//Do something</span>
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">void</span>)someMethod 
{ 
  <span class="hljs-keyword">if</span> (goodCondition) {
    <span>//Do something</span>
  }
}</code></pre>
</div>
<p>比较典型的例子我在JSONModel里遇到过：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>-(<span class="hljs-keyword">id</span>)initWithDictionary:(<span class="hljs-built_in">NSDictionary</span>*)dict error:(<span class="hljs-built_in">NSError</span>)err
{
   <span>//方法1. 参数为nil</span>
   <span class="hljs-keyword">if</span> (!dict) {
     <span class="hljs-keyword">if</span> (err) *err = [JSONModelError errorInputIsNil];
     <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;
    }

    <span>//方法2. 参数不是nil，但也不是字典</span>
    <span class="hljs-keyword">if</span> (![dict isKindOfClass:[<span class="hljs-built_in">NSDictionary</span> <span class="hljs-keyword">class</span>]]) {
        <span class="hljs-keyword">if</span> (err) *err = [JSONModelError errorInvalidDataWithMessage:<span class="hljs-string">@"Attempt to initialize JSONModel object using initWithDictionary:error: but the dictionary parameter was not an 'NSDictionary'."</span>];
        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;
    }

    <span>//方法3. 初始化</span>
    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">self</span> init];
    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">self</span>) {
        <span>//初始化失败</span>
        <span class="hljs-keyword">if</span> (err) *err = [JSONModelError errorModelIsInvalid];
        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;
    }

    <span>//方法4. 检查用户定义的模型里的属性集合是否大于传入的字典里的key集合（如果大于，则返回NO）</span>
    <span class="hljs-keyword">if</span> (![<span class="hljs-keyword">self</span> __doesDictionary:dict matchModelWithKeyMapper:<span class="hljs-keyword">self</span>.__keyMapper error:err]) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;
    }

    <span>//方法5. 核心方法：字典的key与模型的属性的映射</span>
    <span class="hljs-keyword">if</span> (![<span class="hljs-keyword">self</span> __importDictionary:dict withKeyMapper:<span class="hljs-keyword">self</span>.__keyMapper validation:<span class="hljs-literal">YES</span> error:err]) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;
    }

    <span>//方法6. 可以重写[self validate:err]方法并返回NO，让用户自定义错误并阻拦model的返回</span>
    <span class="hljs-keyword">if</span> (![<span class="hljs-keyword">self</span> validate:err]) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;
    }

    <span>//方法7. 终于通过了！成功返回model</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;
}</code></pre>
</div>
<blockquote>
<p>可以看到，在这里，首先判断出各种错误的情况然后提前返回，把最正确的情况放到最后返回。</p>
</blockquote>
<h3 id="3-bool-">3. 条件表达式如果很长，则需要将他们提取出来赋给一个BOOL值</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>let nameContainsSwift = sessionName.hasPrefix(<span class="hljs-string">"Swift"</span>)
let isCurrentYear = sessionDateCompontents.year == <span class="hljs-number">2014</span>
let isSwiftSession = nameContainsSwift &amp;&amp; isCurrentYear
<span class="hljs-keyword">if</span> (isSwiftSession) { 
   <span>// Do something</span>
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ( sessionName.hasPrefix(<span class="hljs-string">"Swift"</span>) &amp;&amp; (sessionDateCompontents.year == <span class="hljs-number">2014</span>) ) { 
    <span>// Do something</span>
}</code></pre>
</div>
<h3 id="4-">4. 条件语句的判断应该是变量在左，常量在右</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ( count == <span class="hljs-number">6</span>) {
}</code></pre>
</div>
<p>或者</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ( object == <span class="hljs-literal">nil</span>) {
}</code></pre>
</div>
<p>或者</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ( !object ) {
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ( <span class="hljs-number">6</span> == count) {
}</code></pre>
</div>
<p>或者</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ( <span class="hljs-literal">nil</span> == object ) {
}</code></pre>
</div>
<h3 id="5-">5. 每个分支的实现代码都必须被大括号包围</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> (!error) {
  <span class="hljs-keyword">return</span> success;
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> (!error)
    <span class="hljs-keyword">return</span> success;</code></pre>
</div>
<p>或者</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> (!error) <span class="hljs-keyword">return</span> success;</code></pre>
</div>
<h3 id="6-">6. 条件过多，过长的时候应该换行</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> (condition1() &amp;&amp; 
    condition2() &amp;&amp; 
    condition3() &amp;&amp; 
    condition4()) {
  <span>// Do something</span>
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> (condition1() &amp;&amp; condition2() &amp;&amp; condition3() &amp;&amp; condition4()) {
  <span>// Do something</span>
}</code></pre>
</div>
<h2 id="for-">for语句</h2>
<hr />

<h3 id="1-for-for-">1. 不可在for循环内修改循环变量，防止for循环失去控制。</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">10</span>; index++){
   ...
   logicToChange(index)
}</code></pre>
</div>
<h3 id="2-continue-break-">2. 避免使用continue和break。</h3>
<p>continue和break所描述的是“什么时候不做什么”，所以为了读懂二者所在的代码，我们需要在头脑里将他们取反。</p>
<p>其实最好不要让这两个东西出现，因为我们的代码只要体现出“什么时候做什么”就好了，而且通过适当的方法，是可以将这两个东西消灭掉的：</p>
<h4 id="2-1-continue-continue-">2.1 如果出现了continue，只需要把continue的条件取反即可</h4>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">var</span> filteredProducts = <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;()
<span class="hljs-keyword">for</span> level <span class="hljs-keyword">in</span> products {
    <span class="hljs-keyword">if</span> level.hasPrefix(<span class="hljs-string">"bad"</span>) {
        <span class="hljs-keyword">continue</span>
    }
    filteredProducts.append(level)
}</code></pre>
</div>
<p>我们可以看到，通过判断字符串里是否含有“bad”这个prefix来过滤掉一些值。其实我们是可以通过取反，来避免使用continue的：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">for</span> level <span class="hljs-keyword">in</span> products {
    <span class="hljs-keyword">if</span> !level.hasPrefix(<span class="hljs-string">"bad"</span>) {
      filteredProducts.append(level)
    }
}</code></pre>
</div>
<h4 id="2-2-while-break-break-">2.2  消除while里的break：将break的条件取反，并合并到主循环里</h4>
<p>在while里的block其实就相当于“不存在”，既然是不存在的东西就完全可以在最开始的条件语句中将其排除。</p>
<p>while里的break：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">while</span> (condition1) {
  ...
  <span class="hljs-keyword">if</span> (condition2) {
    <span class="hljs-keyword">break</span>;
  }
}</code></pre>
</div>
<p>取反并合并到主条件：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">while</span> (condition1 &amp;&amp; !condition2) {
  ...
}</code></pre>
</div>
<h4 id="2-3-break-break-return-">2.3 在有返回值的方法里消除break：将break转换为return立即返回</h4>
<p>有些朋友喜欢这样做：在有返回值的方法里break之后，再返回某个值。其实完全可以在break的那一行直接返回。</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasBadProductIn</span><span class="hljs-params">(products: Array&lt;String&gt;)</span></span> -&gt; <span class="hljs-type">Bool</span>
{

    <span class="hljs-keyword">var</span> result = <span class="hljs-literal">false</span>    
    <span class="hljs-keyword">for</span> level <span class="hljs-keyword">in</span> products {
        <span class="hljs-keyword">if</span> level.hasPrefix(<span class="hljs-string">"bad"</span>) {
            result = <span class="hljs-literal">true</span>
        }
    }
   <span class="hljs-keyword">return</span> result
}</code></pre>
</div>
<p>遇到错误条件直接返回：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasBadProductIn</span><span class="hljs-params">(products: Array&lt;String&gt;)</span></span> -&gt; <span class="hljs-type">Bool</span> 
{
    <span class="hljs-keyword">for</span> level <span class="hljs-keyword">in</span> products {
        <span class="hljs-keyword">if</span> level.hasPrefix(<span class="hljs-string">"bad"</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
        }
    }
   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
}</code></pre>
</div>
<p>这样写的话不用特意声明一个变量来特意保存需要返回的值，看起来非常简洁，可读性高。</p>
<h2 id="switch-">Switch语句</h2>
<hr />

<h3 id="1-">1. 每个分支都必须用大括号括起来</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">switch</span> (integer) {  
  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  {
    <span>// ...  </span>
   }
    <span class="hljs-keyword">break</span>;  
  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: {  
    <span>// ...  </span>
    <span class="hljs-keyword">break</span>;  
  }  
  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: {
    <span>// ...  </span>
    <span class="hljs-keyword">break</span>; 
  }
  <span class="hljs-keyword">default</span>:{
    <span>// ...  </span>
    <span class="hljs-keyword">break</span>; 
  }
}</code></pre>
</div>
<h3 id="2-default-default-">2. 使用枚举类型时，不能有default分支， 除了使用枚举类型以外，都必须有default分支</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-type">RWTLeftMenuTopItemType</span> menuType = <span class="hljs-type">RWTLeftMenuTopItemMain</span>;  
<span class="hljs-keyword">switch</span> (menuType) {  
  <span class="hljs-keyword">case</span> <span class="hljs-type">RWTLeftMenuTopItemMain</span>: {
    <span>// ...  </span>
    <span class="hljs-keyword">break</span>; 
   }
  <span class="hljs-keyword">case</span> <span class="hljs-type">RWTLeftMenuTopItemShows</span>: {
    <span>// ...  </span>
    <span class="hljs-keyword">break</span>; 
  }
  <span class="hljs-keyword">case</span> <span class="hljs-type">RWTLeftMenuTopItemSchedule</span>: {
    <span>// ...  </span>
    <span class="hljs-keyword">break</span>; 
  }
}</code></pre>
</div>
<p>在Switch语句使用枚举类型的时候，如果使用了default分支，在将来就无法通过编译器来检查新增的枚举类型了。</p>
<h2 id="-">函数</h2>
<hr />

<h3 id="1-50-">1. 一个函数的长度必须限制在50行以内</h3>
<p>通常来说，在阅读一个函数的时候，如果视需要跨过很长的垂直距离会非常影响代码的阅读体验。如果需要来回滚动眼球或代码才能看全一个方法，就会很影响思维的连贯性，对阅读代码的速度造成比较大的影响。最好的情况是在不滚动眼球或代码的情况下一眼就能将该方法的全部代码映入眼帘。</p>
<h3 id="2-">2. 一个函数只做一件事（单一原则）</h3>
<p>每个函数的职责都应该划分的很明确（就像类一样）。</p>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>dataConfiguration()
viewConfiguration()</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dataConfiguration</span><span class="hljs-params">()</span>
</span>{   
   ...
   viewConfiguration()
}</code></pre>
</div>
<h3 id="3-">3. 对于有返回值的函数（方法），每一个分支都必须有返回值</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">function</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">if</span>(condition1){
        <span class="hljs-keyword">return</span> count1
    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(condition2){
        <span class="hljs-keyword">return</span> count2
    }<span class="hljs-keyword">else</span>{
       <span class="hljs-keyword">return</span> defaultCount
    } 
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">function</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">if</span>(condition1){
        <span class="hljs-keyword">return</span> count1
    }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(condition2){
        <span class="hljs-keyword">return</span> count2
    }
}</code></pre>
</div>
<h3 id="4-">4. 对输入参数的正确性和有效性进行检查，参数错误立即返回</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">function</span><span class="hljs-params">(param1,param2)</span>
</span>{
      <span class="hljs-keyword">if</span>(param1 is unavailable){
           <span class="hljs-keyword">return</span>;
      }

      <span class="hljs-keyword">if</span>(param2 is unavailable){
           <span class="hljs-keyword">return</span>;
      }

     <span>//Do some right thing</span>
}</code></pre>
</div>
<h3 id="5-">5. 如果在不同的函数内部有相同的功能，应该把相同的功能抽取出来单独作为另一个函数</h3>
<p>原来的调用：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">void</span> logic() {
  a();
  b()；
  <span class="hljs-keyword">if</span> (logic1 condition) {
    c();
  } <span class="hljs-keyword">else</span> {
    d();
  }
}</code></pre>
</div>
<p>将a，b函数抽取出来作为单独的函数</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">void</span> basicConfig() 
{
  a();
  b();
}

<span class="hljs-keyword">void</span> logic1() 
{
  basicConfig();
  c();
}

<span class="hljs-keyword">void</span> logic2() 
{
  basicConfig();
  d();
}</code></pre>
</div>
<h3 id="6-">6. 将函数内部比较复杂的逻辑提取出来作为单独的函数</h3>
<p>一个函数内的不清晰（逻辑判断比较多，行数较多）的那片代码，往往可以被提取出去，构成一个新的函数，然后在原来的地方调用它这样你就可以使用有意义的函数名来代替注释，增加程序的可读性。</p>
<p>举一个发送邮件的例子：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>openEmailSite();
login();

writeTitle(title);
writeContent(content);
writeReceiver(receiver);
addAttachment(attachment);

send();</code></pre>
</div>
<p>中间的部分稍微长一些，我们可以将它们提取出来：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">writeEmail</span><span class="hljs-params">(title, content,receiver,attachment)</span>
</span>{
  writeTitle(title);
  writeContent(content);
  writeReceiver(receiver);
  addAttachment(attachment); 
}</code></pre>
</div>
<p>然后再看一下原来的代码：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>openEmailSite();
login();
writeEmail(title, content,receiver,attachment)
send();</code></pre>
</div>
<h3 id="8-class-member-">8. 避免使用全局变量，类成员（class member）来传递信息，尽量使用局部变量和参数。</h3>
<p>在一个类里面，经常会有传递某些变量的情况。而如果需要传递的变量是某个全局变量或者属性的时候，有些朋友不喜欢将它们作为参数，而是在方法内部就直接访问了：</p>
<div class="highlighter-rouge"><pre class="highlight"><code> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{
   <span class="hljs-keyword">var</span> x;

   <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateX</span><span class="hljs-params">()</span></span> 
   {
      ...
      x = ...;
   }

   <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printX</span><span class="hljs-params">()</span></span> 
   {
     updateX();
     <span class="hljs-built_in">print</span>(x);
   }
 }</code></pre>
</div>
<p>我们可以看到，在printX方法里面，updateX和print方法之间并没有值的传递，乍一看我们可能不知道x从哪里来的，导致程序的可读性降低了。</p>
<p>而如果你使用局部变量而不是类成员来传递信息，那么这两个函数就不需要依赖于某一个类，而且更加容易理解，不易出错：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>func updateX() -&gt; String
 {
    x = ...;
    <span class="hljs-keyword">return</span> x;
 }

 func printX() 
 {
   String x = updateX();
   print(x);
 }</code></pre>
</div>
<h2 id="-">注释</h2>
<hr />

<p>优秀的代码大部分是可以自描述的，我们完全可以用程代码本身来表达它到底在干什么，而不需要注释的辅助。</p>
<p>但并不是说一定不能写注释，有以下三种情况比较适合写注释：</p>
<ol>
<li>公共接口（注释要告诉阅读代码的人，当前类能实现什么功能）。</li>
<li>涉及到比较深层专业知识的代码（注释要体现出实现原理和思想）。</li>
<li>容易产生歧义的代码（但是严格来说，容易让人产生歧义的代码是不允许存在的）。</li>
</ol>
<p>除了上述这三种情况，如果别人只能依靠注释才能读懂你的代码的时候，就要反思代码出现了什么问题。</p>
<p>最后，对于注释的内容，相对于“做了什么”，更应该说明“为什么这么做”。</p>
<h2 id="code-review">Code Review</h2>
<hr />

<p>换行、注释、方法长度、代码重复等这些是通过机器检查出来的问题，是无需通过人来做的。</p>
<p>而且除了审查需求的实现的程度，bug是否无处藏身以外，更应该关注代码的设计。比如类与类之间的耦合程度，设计的可扩展性，复用性，是否可以将某些方法抽出来作为接口等等。</p>
<h1 id="-ios-">三. iOS规范</h1>
<h2 id="-">变量</h2>
<hr />

<h3 id="1-">1. 变量名必须使用驼峰格式</h3>
<p>类，协议使用大驼峰：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>HomePageViewController.h
&lt;HeaderViewDelegate&gt;</code></pre>
</div>
<p>对象等局部变量使用小驼峰：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">NSString</span> *personName = <span class="hljs-string">@""</span>;
<span class="hljs-built_in">NSUInteger</span> totalCount = <span class="hljs-number">0</span>;</code></pre>
</div>
<h3 id="2-">2. 变量的名称必须同时包含功能与类型</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">UIButton</span> *addBtn <span>//添加按钮</span>
<span class="hljs-built_in">UILabel</span> *nameLbl <span>//名字标签</span>
<span class="hljs-built_in">NSString</span> *addressStr<span>//地址字符串</span></code></pre>
</div>
<h3 id="3-">3. 系统常用类作实例变量声明时加入后缀</h3>
<table>
<thead>
<tr>
<th>类型</th>
<th>后缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>UIViewController</td>
<td>VC</td>
</tr>
<tr>
<td>UIView</td>
<td>View</td>
</tr>
<tr>
<td>UILabel</td>
<td>Lbl</td>
</tr>
<tr>
<td>UIButton</td>
<td>Btn</td>
</tr>
<tr>
<td>UIImage</td>
<td>Img</td>
</tr>
<tr>
<td>UIImageView</td>
<td>ImagView </td>
</tr>
<tr>
<td>NSArray</td>
<td>Array</td>
</tr>
<tr>
<td>NSMutableArray</td>
<td>Marray</td>
</tr>
<tr>
<td>NSDictionary</td>
<td>Dict</td>
</tr>
<tr>
<td>NSMutableDictionary</td>
<td>Mdict</td>
</tr>
<tr>
<td>NSString</td>
<td>Str</td>
</tr>
<tr>
<td>NSMutableString</td>
<td>Mstr</td>
</tr>
<tr>
<td>NSSet</td>
<td>Set</td>
</tr>
<tr>
<td>NSMutableSet</td>
<td>Mset</td>
</tr>
</tbody>
</table>
<h2 id="-">常量</h2>
<hr />

<h3 id="1-">1. 常量以相关类名作为前缀</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">NSTimeInterval</span> ZOCSignInViewControllerFadeOutAnimationDuration = <span class="hljs-number">0.4</span>;</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">NSTimeInterval</span> fadeOutTime = <span class="hljs-number">0.4</span>;</code></pre>
</div>
<h3 id="2-define-">2. 建议使用类型常量，不建议使用#define预处理命令</h3>
<p>首先比较一下这两种声明常量的区别：</p>
<ul>
<li>预处理命令：简单的文本替换，不包括类型信息，并且可被任意修改。</li>
<li>类型常量：包括类型信息，并且可以设置其使用范围，而且不可被修改。</li>
</ul>
<p>使用预处理虽然能达到替换文本的目的，但是本身还是有局限性的：</p>
<ul>
<li>不具备类型信息。</li>
<li>可以被任意修改。</li>
</ul>
<h3 id="3-">3. 对外公开某个常量：</h3>
<p>如果我们需要发送通知，那么就需要在不同的地方拿到通知的“频道”字符串（通知的名称），那么显然这个字符串是不能被轻易更改，而且可以在不同的地方获取。这个时候就需要定义一个外界可见的字符串常量。</p>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span>//头文件</span>
<span class="hljs-keyword">extern</span> <span class="hljs-built_in">NSString</span> *<span class="hljs-keyword">const</span> ZOCCacheControllerDidClearCacheNotification;</code></pre>
</div>
<div class="highlighter-rouge"><pre class="highlight"><code><span>//实现文件</span>
<span class="hljs-keyword">static</span> <span class="hljs-built_in">NSString</span> * <span class="hljs-keyword">const</span> ZOCCacheControllerDidClearCacheNotification = <span class="hljs-string">@"ZOCCacheControllerDidClearCacheNotification"</span>;
<span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">CGFloat</span> ZOCImageThumbnailHeight = <span class="hljs-number">50.0</span>f;</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-meta">#define CompanyName @<span class="hljs-meta-string">"Apple Inc."</span> </span>
<span class="hljs-meta">#define magicNumber 42</span></code></pre>
</div>
<h2 id="-">宏</h2>
<hr />

<h3 id="1-_-">1. 宏、常量名都要使用大写字母，用下划线‘_’分割单词。</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-meta">#define URL_GAIN_QUOTE_LIST @<span class="hljs-meta-string">"/v1/quote/list"</span></span>
<span class="hljs-meta">#define URL_UPDATE_QUOTE_LIST @<span class="hljs-meta-string">"/v1/quote/update"</span></span>
<span class="hljs-meta">#define URL_LOGIN  @<span class="hljs-meta-string">"/v1/user/login”</span></span></code></pre>
</div>
<h3 id="2-">2. 宏定义中如果包含表达式或变量，表达式和变量必须用小括号括起来。</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-meta">#define MY_MIN(A, B)  ((A)&gt;(B)?(B):(A))</span></code></pre>
</div>
<h2 id="cgrect-">CGRect函数</h2>
<hr />

<p>其实iOS内部已经提供了相应的获取CGRect各个部分的函数了，它们的可读性比较高，而且简短，推荐使用：</p>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">CGRect</span> frame = <span class="hljs-keyword">self</span>.view.frame; 
<span class="hljs-built_in">CGFloat</span> x = <span class="hljs-built_in">CGRectGetMinX</span>(frame); 
<span class="hljs-built_in">CGFloat</span> y = <span class="hljs-built_in">CGRectGetMinY</span>(frame); 
<span class="hljs-built_in">CGFloat</span> width = <span class="hljs-built_in">CGRectGetWidth</span>(frame); 
<span class="hljs-built_in">CGFloat</span> height = <span class="hljs-built_in">CGRectGetHeight</span>(frame); 
<span class="hljs-built_in">CGRect</span> frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, width, height);</code></pre>
</div>
<p>而不是</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">CGRect</span> frame = <span class="hljs-keyword">self</span>.view.frame;  
<span class="hljs-built_in">CGFloat</span> x = frame.origin.x;  
<span class="hljs-built_in">CGFloat</span> y = frame.origin.y;  
<span class="hljs-built_in">CGFloat</span> width = frame.size.width;  
<span class="hljs-built_in">CGFloat</span> height = frame.size.height;  
<span class="hljs-built_in">CGRect</span> frame = (<span class="hljs-built_in">CGRect</span>){ .origin = <span class="hljs-built_in">CGPointZero</span>, .size = frame.size };</code></pre>
</div>
<h2 id="-">范型</h2>
<hr />

<p>建议在定义NSArray和NSDictionary时使用泛型，可以保证程序的安全性：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *testArr = [<span class="hljs-built_in">NSArray</span> arrayWithObjects:<span class="hljs-string">@"Hello"</span>, <span class="hljs-string">@"world"</span>, <span class="hljs-literal">nil</span>];
<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSString</span> *, <span class="hljs-built_in">NSNumber</span> *&gt; *dic = @{<span class="hljs-string">@"key"</span>:@(<span class="hljs-number">1</span>), <span class="hljs-string">@"age"</span>:@(<span class="hljs-number">10</span>)};</code></pre>
</div>
<h2 id="block">Block</h2>
<hr />

<p>为常用的Block类型创建typedef</p>
<p>如果我们需要重复创建某种block（相同参数，返回值）的变量，我们就可以通过typedef来给某一种块定义属于它自己的新类型</p>
<p>例如：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>int (^variableName)(BOOL flag, int value) =^(BOOL flag, int value)
{
     <span>// Implementation</span>
     <span class="hljs-keyword">return</span> someInt;
}</code></pre>
</div>
<p>这个Block有一个bool参数和一个int参数，并返回int类型。我们可以给它定义类型：</p>
<p><code>typedef int(^EOCSomeBlock)(BOOL flag, int value);</code></p>
<p>再次定义的时候，就可以通过简单的赋值来实现：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>EOCSomeBlock block = ^(BOOL flag, int value){
     <span>// Implementation</span>
};</code></pre>
</div>
<p>定义作为参数的Block：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">void</span>)startWithCompletionHandler: (<span class="hljs-keyword">void</span>(^)(NSData *data, NSError *error))completion;</code></pre>
</div>
<p>这里的Block有一个NSData参数，一个NSError参数并没有返回值</p>
<div class="highlighter-rouge"><pre class="highlight"><code>typedef <span class="hljs-keyword">void</span>(^EOCCompletionHandler)(NSData *data, NSError *error);
- (<span class="hljs-keyword">void</span>)startWithCompletionHandler:(EOCCompletionHandler)completion;”</code></pre>
</div>
<p>通过typedef定义Block签名的好处是:如果要某种块增加参数，那么只修改定义签名的那行代码即可。</p>
<h2 id="-">字面量语法</h2>
<hr />

<p>尽量使用字面量值来创建 NSString , NSDictionary , NSArray , NSNumber 这些不可变对象：</p>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">NSArray</span> *names = @[<span class="hljs-string">@"Brian"</span>, <span class="hljs-string">@"Matt"</span>, <span class="hljs-string">@"Chris"</span>, <span class="hljs-string">@"Alex"</span>, <span class="hljs-string">@"Steve"</span>, <span class="hljs-string">@"Paul"</span>];
<span class="hljs-built_in">NSDictionary</span> *productManagers = @{<span class="hljs-string">@"iPhone"</span> : <span class="hljs-string">@"Kate"</span>, <span class="hljs-string">@"iPad"</span> : <span class="hljs-string">@"Kamal"</span>, <span class="hljs-string">@"Mobile Web"</span> : <span class="hljs-string">@"Bill"</span>}; 
<span class="hljs-built_in">NSNumber</span> *shouldUseLiterals = @YES;<span class="hljs-built_in">NSNumber</span> *buildingZIPCode = @<span class="hljs-number">10018</span>;</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">NSArray</span> *names = [<span class="hljs-built_in">NSArray</span> arrayWithObjects:<span class="hljs-string">@"Brian"</span>, <span class="hljs-string">@"Matt"</span>, <span class="hljs-string">@"Chris"</span>, <span class="hljs-string">@"Alex"</span>, <span class="hljs-string">@"Steve"</span>, <span class="hljs-string">@"Paul"</span>, <span class="hljs-literal">nil</span>];
<span class="hljs-built_in">NSDictionary</span> *productManagers = [<span class="hljs-built_in">NSDictionary</span> dictionaryWithObjectsAndKeys: <span class="hljs-string">@"Kate"</span>, <span class="hljs-string">@"iPhone"</span>, <span class="hljs-string">@"Kamal"</span>, <span class="hljs-string">@"iPad"</span>, <span class="hljs-string">@"Bill"</span> ];
<span class="hljs-built_in">NSNumber</span> *shouldUseLiterals = [<span class="hljs-built_in">NSNumber</span> numberWithBool:<span class="hljs-literal">YES</span>];<span class="hljs-built_in">NSNumber</span> *buildingZIPCode = [<span class="hljs-built_in">NSNumber</span> numberWithInteger:<span class="hljs-number">10018</span>];</code></pre>
</div>
<h2 id="-">属性</h2>
<hr />

<h3 id="1-">1. 属性的命名使用小驼峰</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">readwrite</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIButton</span> *confirmButton;</code></pre>
</div>
<h3 id="2-">2. 属性的关键字推荐按照 原子性，读写，内存管理的顺序排列</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">readwrite</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *name;
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">readonly</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *gender;
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">readwrite</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *headerView;</code></pre>
</div>
<h3 id="3-block-copy-">3. Block属性应该使用copy关键字</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (^ErrorCodeBlock) (<span class="hljs-keyword">id</span> errorCode,<span class="hljs-built_in">NSString</span> *message);
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">readwrite</span>, <span class="hljs-keyword">copy</span>) ErrorCodeBlock errorBlock;<span>//将block拷贝到堆中</span></code></pre>
</div>
<h3 id="4-bool-getter-is-">4. 形容词性的BOOL属性的getter应该加上is前缀</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">assign</span>, <span class="hljs-keyword">getter</span>=isEditable) <span class="hljs-built_in">BOOL</span> editable;</code></pre>
</div>
<h3 id="5-getter-">5. 使用getter方法做懒加载</h3>
<p>实例化一个对象是需要耗费资源的，如果这个对象里的某个属性的实例化要调用很多配置和计算，就需要懒加载它，在使用它的前一刻对它进行实例化：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-built_in">NSDateFormatter</span> *)dateFormatter 
{
    <span class="hljs-keyword">if</span> (!_dateFormatter) {
           _dateFormatter = [[<span class="hljs-built_in">NSDateFormatter</span> alloc] init];
           <span class="hljs-built_in">NSLocale</span> *enUSPOSIXLocale = [[<span class="hljs-built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="hljs-string">@"en_US_POSIX"</span>];
           [_dateFormatter setLocale:enUSPOSIXLocale];
           [_dateFormatter setDateFormat:<span class="hljs-string">@"yyyy-MM-dd'T'HH:mm:ss.SSS"</span>];
    } 
    <span class="hljs-keyword">return</span> _dateFormatter;
}</code></pre>
</div>
<p>但是也有对这种做法的争议：getter方法可能会产生某些副作用，例如如果它修改了全局变量，可能会产生难以排查的错误。</p>
<h3 id="6-init-dealloc-">6. 除了init和dealloc方法，建议都使用点语法访问属性</h3>
<p>使用点语法的好处：</p>
<h4 id="setter-">setter：</h4>
<ol>
<li>setter会遵守内存管理语义(strong, copy, weak)。</li>
<li>通过在内部设置断点，有助于调试bug。</li>
<li>可以过滤一些外部传入的值。</li>
<li>捕捉KVO通知。</li>
</ol>
<h4 id="getter-">getter：</h4>
<ol>
<li>允许子类化。</li>
<li>通过在内部设置断点，有助于调试bug。</li>
<li>实现懒加载（lazy initialization）。</li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>懒加载的属性，必须通过点语法来读取数据。因为懒加载是通过重写getter方法来初始化实例变量的，如果不通过属性来读取该实例变量，那么这个实例变量就永远不会被初始化。</li>
<li>在init和dealloc方法里面使用点语法的后果是：因为没有绕过setter和getter，在setter和getter里面可能会有很多其他的操作。而且如果它的子类重载了它的setter和getter方法，那么就可能导致该子类调用其他的方法。</li>
</ol>
</blockquote>
<h3 id="7-">7. 不要滥用点语法，要区分好方法调用和属性访问</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>view.backgroundColor = [<span class="hljs-built_in">UIColor</span> orangeColor]; 
[<span class="hljs-built_in">UIApplication</span> sharedApplication].delegate;</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>[view setBackgroundColor:[<span class="hljs-built_in">UIColor</span> orangeColor]]; 
<span class="hljs-built_in">UIApplication</span>.sharedApplication.delegate;</code></pre>
</div>
<h3 id="8-">8. 尽量使用不可变对象</h3>
<p>建议尽量把对外公布出来的属性设置为只读，在实现文件内部设为读写。具体做法是：</p>
<ul>
<li>在头文件中，设置对象属性为<code>readonly</code>。</li>
<li>在实现文件中设置为<code>readwrite</code>。</li>
</ul>
<p>这样一来，在外部就只能读取该数据，而不能修改它，使得这个类的实例所持有的数据更加安全。而且，对于集合类的对象，更应该仔细考虑是否可以将其设为可变的。</p>
<p>如果在公开部分只能设置其为只读属性，那么就在非公开部分存储一个可变型。所以当在外部获取这个属性时，获取的只是内部可变型的一个不可变版本,例如：</p>
<p>在公共API中：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>@interface EOCPerson : NSObject

@property (nonatomic, copy, readonly) NSString *firstName;
@property (nonatomic, copy, readonly) NSString *lastName;
@property (nonatomic, strong, readonly) NSSet *friends <span>//向外公开的不可变集合</span>

- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName;
- (<span class="hljs-keyword">void</span>)addFriend:(EOCPerson*)person;
- (<span class="hljs-keyword">void</span>)removeFriend:(EOCPerson*)person;

@end</code></pre>
</div>
<blockquote>
<p>在这里，我们将friends属性设置为不可变的set。然后，提供了来增加和删除这个set里的元素的公共接口。</p>
</blockquote>
<p>在实现文件里：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>
@interface EOCPerson ()

@property (nonatomic, copy, readwrite) NSString *firstName;
@property (nonatomic, copy, readwrite) NSString *lastName;

@end

@implementation EOCPerson {
     NSMutableSet *_internalFriends;  <span>//实现文件里的可变集合</span>
}

- (NSSet*)friends 
{
     <span class="hljs-keyword">return</span> [_internalFriends copy]; <span>//get方法返回的永远是可变set的不可变型</span>
}

- (<span class="hljs-keyword">void</span>)addFriend:(EOCPerson*)person 
{
    [_internalFriends addObject:person]; <span>//在外部增加集合元素的操作</span>
    <span>//do something when add element</span>
}

- (<span class="hljs-keyword">void</span>)removeFriend:(EOCPerson*)person 
{
    [_internalFriends removeObject:person]; <span>//在外部移除元素的操作</span>
    <span>//do something when remove element</span>
}

- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName 
{

     <span class="hljs-keyword">if</span> ((self = [<span class="hljs-keyword">super</span> init])) {
        _firstName = firstName;
        _lastName = lastName;
        _internalFriends = [NSMutableSet <span class="hljs-keyword">new</span>];
    }
 <span class="hljs-keyword">return</span> self;
}</code></pre>
</div>
<p>我们可以看到，在实现文件里，保存一个可变set来记录外部的增删操作。</p>
<p>这里最重要的代码是：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (NSSet*)friends 
{
   <span class="hljs-keyword">return</span> [_internalFriends copy];
}</code></pre>
</div>
<blockquote>
<p>这个是friends属性的获取方法：它将当前保存的可变set复制了一不可变的set并返回。因此，外部读取到的set都将是不可变的版本。</p>
</blockquote>
<h2 id="-">方法</h2>
<hr />

<h3 id="1-and-">1. 方法名中不应使用and，而且签名要与对应的参数名保持高度一致</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">instancetype</span>)initWithWidth:(<span class="hljs-built_in">CGFloat</span>)width height:(<span class="hljs-built_in">CGFloat</span>)height;</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">instancetype</span>)initWithWidth:(<span class="hljs-built_in">CGFloat</span>)width andHeight:(<span class="hljs-built_in">CGFloat</span>)height;</code></pre>
</div>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">instancetype</span>)initWith:(<span class="hljs-keyword">int</span>)width and:(<span class="hljs-keyword">int</span>)height;</code></pre>
</div>
<h3 id="2-">2. 方法实现时，如果参数过长，则令每个参数占用一行，以冒号对齐。</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">void</span>)doSomethingWith:(<span class="hljs-built_in">NSString</span> *)theFoo
                   rect:(<span class="hljs-built_in">CGRect</span>)theRect
               interval:(<span class="hljs-built_in">CGFloat</span>)theInterval
{
   <span>//Implementation</span>
}</code></pre>
</div>
<h3 id="3-">3. 私有方法应该在实现文件中申明。</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span>
- (<span class="hljs-keyword">void</span>)basicConfiguration;
<span class="hljs-keyword">@end</span>

<span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span>
- (<span class="hljs-keyword">void</span>)basicConfiguration
{
   <span>//Do some basic configuration</span>
}
<span class="hljs-keyword">@end</span></code></pre>
</div>
<h3 id="4-">4. 方法名用小写字母开头的单词组合而成</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-built_in">NSString</span> *)descriptionWithLocale:(<span class="hljs-keyword">id</span>)locale;</code></pre>
</div>
<h3 id="5-">5. 方法名前缀</h3>
<ul>
<li>刷新视图的方法名要以<code>refresh</code>为首。</li>
<li>更新数据的方法名要以<code>update</code>为首。</li>
</ul>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">void</span>)refreshHeaderViewWithCount:(<span class="hljs-built_in">NSUInteger</span>)count;
- (<span class="hljs-keyword">void</span>)updateDataSourceWithViewModel:(ViewModel*)viewModel;</code></pre>
</div>
<h2 id="-">面向协议编程</h2>
<hr />

<p>如果某些功能（方法）具备可复用性，我们就需要将它们抽取出来放入一个抽象接口文件中（在iOS中，抽象接口即协议），让不同类型的对象遵循这个协议，从而拥有相同的功能。</p>
<p>因为协议是不依赖于某个对象的，所以通过协议，我们可以解开两个对象之间的耦合。如何理解呢？我们来看一下下面这个例子：</p>
<p>现在有一个需求：在一个<code>UITableViewController</code>里面拉取feed并展示出来。</p>
<h3 id="-">方案一：</h3>
<p>定义一个拉取feed的类<code>ZOCFeedParser</code>，这个类有一些代理方法实现feed相关功能：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">ZOCFeedParserDelegate</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span>
<span class="hljs-keyword">@optional</span>
- (<span class="hljs-keyword">void</span>)feedParserDidStart:(ZOCFeedParser *)parser;
- (<span class="hljs-keyword">void</span>)feedParser:(ZOCFeedParser *)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info; 
- (<span class="hljs-keyword">void</span>)feedParser:(ZOCFeedParser *)parser didParseFeedItem:(ZOCFeedItemDTO *)item; 
- (<span class="hljs-keyword">void</span>)feedParserDidFinish:(ZOCFeedParser *)parser;
- (<span class="hljs-keyword">void</span>)feedParser:(ZOCFeedParser *)parser didFailWithError:(<span class="hljs-built_in">NSError</span> *)error;<span class="hljs-keyword">@end</span> 

<span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ZOCFeedParser</span> : <span class="hljs-title">NSObject</span></span>
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">id</span> &lt;ZOCFeedParserDelegate&gt; delegate; 
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSURL</span> *url; 

- (<span class="hljs-keyword">id</span>)initWithURL:(<span class="hljs-built_in">NSURL</span> *)url; 
- (<span class="hljs-built_in">BOOL</span>)start; 
- (<span class="hljs-keyword">void</span>)stop; 
<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>然后在<code>ZOCTableViewController</code>里面传入<code>ZOCFeedParser</code>，并遵循其代理方法，实现feed的拉取功能。</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ZOCTableViewController</span> : <span class="hljs-title">UITableViewController</span>&lt;<span class="hljs-title">ZOCFeedParserDelegate</span>&gt;</span>
- (<span class="hljs-keyword">instancetype</span>)initWithFeedParser:(ZOCFeedParser *)feedParser; 
<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>具体应用：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-built_in">NSURL</span> *feedURL = [<span class="hljs-built_in">NSURL</span> URLWithString:<span class="hljs-string">@"http://bbc.co.uk/feed.rss"</span>]; 
ZOCFeedParser *feedParser = [[ZOCFeedParser alloc] initWithURL:feedURL]; 
ZOCTableViewController *tableViewController = [[ZOCTableViewController alloc] initWithFeedParser:feedParser]; 
feedParser.delegate = tableViewController;</code></pre>
</div>
<p>OK，现在我们实现了需求：在<code>ZOCTableViewController</code>里面存放了一个<code>ZOCFeedParser</code>对象来处理feed的拉取功能。</p>
<p>但这里有一个严重的耦合问题：<code>ZOCTableViewController</code>只能通过<code>ZOCFeedParser</code>对象来处理feed的拉取功能。<br />于是我们重新审视一下这个需求：其实我们实际上只需要<code>ZOCTableViewController</code>拉取feed就可以了，而具体是由哪个对象来拉取，<code>ZOCTableViewController</code>并不需要关心。</p>
<p>也就是说，我们需要提供给<code>ZOCTableViewController</code>的是一个更范型的对象，这个对象具备了拉取feed的功能就好了，而不应该仅仅局限于某个具体的对象（<code>ZOCFeedParser</code>）。所以，刚才的设计需要重新做一次修改：</p>
<h3 id="-">方案二：</h3>
<p>首先需要在一个接口文件<code>ZOCFeedParserProtocol.h</code>里面定义抽象的，具有拉取feed功能的协议：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">ZOCFeedParserDelegate</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span>
<span class="hljs-keyword">@optional</span>
- (<span class="hljs-keyword">void</span>)feedParserDidStart:(<span class="hljs-keyword">id</span>&lt;ZOCFeedParserProtocol&gt;)parser;
- (<span class="hljs-keyword">void</span>)feedParser:(<span class="hljs-keyword">id</span>&lt;ZOCFeedParserProtocol&gt;)parser didParseFeedInfo:(ZOCFeedInfoDTO *)info; 
- (<span class="hljs-keyword">void</span>)feedParser:(<span class="hljs-keyword">id</span>&lt;ZOCFeedParserProtocol&gt;)parser didParseFeedItem:(ZOCFeedItemDTO *)item; 
- (<span class="hljs-keyword">void</span>)feedParserDidFinish:(<span class="hljs-keyword">id</span>&lt;ZOCFeedParserProtocol&gt;)parser;
- (<span class="hljs-keyword">void</span>)feedParser:(<span class="hljs-keyword">id</span>&lt;ZOCFeedParserProtocol&gt;)parser didFailWithError:(<span class="hljs-built_in">NSError</span> *)error;<span class="hljs-keyword">@end</span> 

<span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">ZOCFeedParserProtocol</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span>
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">id</span> &lt;ZOCFeedParserDelegate&gt; delegate; 
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSURL</span> *url;

- (<span class="hljs-built_in">BOOL</span>)start;
- (<span class="hljs-keyword">void</span>)stop;

<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>而原来的<code>ZOCFeedParser</code>仅仅是需要遵循上面这个协议就具备了拉取feed的功能：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ZOCFeedParser</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">ZOCFeedParserProtocol</span>&gt; </span>
- (<span class="hljs-keyword">id</span>)initWithURL:(<span class="hljs-built_in">NSURL</span> *)url;<span>//仅仅需要通过传入url即可，其他事情都交给ZOCFeedParserProtocol@end</span></code></pre>
</div>
<p>而且，<code>ZOCTableViewController</code>也不直接依赖于<code>ZOCFeedParser</code>对象，我们只需要传给它一个遵循<code>&lt;ZOCFeedParserProtocol&gt;</code>的对象即可。</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ZOCTableViewController</span> : <span class="hljs-title">UITableViewController</span> &lt;<span class="hljs-title">ZOCFeedParserDelegate</span>&gt;</span>
- (<span class="hljs-keyword">instancetype</span>)initWithFeedParser:(<span class="hljs-keyword">id</span>&lt;ZOCFeedParserProtocol&gt;)feedParser;
<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>这样一来，<code>ZOCTableViewController</code>和<code>ZOCFeedParser</code>之间就没有直接的关系了。以后，如果我们想：</p>
<ul>
<li>给这个feed拉取器增加新的功能：仅需要修改<code>ZOCFeedParserProtocol.h</code>文件。</li>
<li>更换一个feed拉取器实例：创建一个新类型来遵循<code>ZOCFeedParserProtocol.h</code>即可。</li>
</ul>
<h2 id="ios-">iOS 中委托的设计</h2>
<hr />

<h3 id="1-">1. 要区分好代理和数据源的区别</h3>
<p>在iOS开发中的委托模式包含了delegate（代理）和datasource（数据源）。虽然二者同属于委托模式，但是这两者是有区别的。这个区别就是二者的信息流方向是不同的：</p>
<ul>
<li>delegate ：事件发生的时候，委托者需要通知代理。（信息流从委托者到代理）</li>
<li>datasource：委托者需要从数据源拉取数据。（信息流从数据源到委托者）</li>
</ul>
<p>然而包括苹果也没有做好榜样，将它们彻底的区分开。就拿UITableView来说，在它的delegate方法中有一个方法：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">void</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath;</code></pre>
</div>
<p>这个方法正确地体现了代理的作用：委托者（tableview）告诉代理（控制器）“我的某个cell被点击了”。但是，UITableViewDelegate的方法列表里还有这个方法：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-built_in">CGFloat</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath;</code></pre>
</div>
<p>该方法的作用是 由控制器来告诉tabievlew的行高，也就是说，它的信息流是从控制器（数据源）到委托者（tableview）的。准确来讲，它应该是一个数据源方法，而不是代理方法。</p>
<p>在UITableViewDataSource中，就有标准的数据源方法：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="hljs-built_in">UITableView</span> *)tableView;</code></pre>
</div>
<p>这个方法的作用就是让tableview向控制器拉取一个section数量的数据。</p>
<p>所以，在我们设计一个视图控件的代理和数据源时，一定要区分好二者的区别，合理地划分哪些方法属于代理方法，哪些方法属于数据源方法。</p>
<h3 id="2-">2. 代理方法的第一个参数必须为委托者</h3>
<p>代理方法必须以委托者作为第一个参数（参考UITableViewDelegate）的方法。其目的是为了区分不同委托着的实例。因为同一个控制器是可以作为多个tableview的代理的。若要区分到底是哪个tableview的cell被点击了，就需要在``</p>
<ul>
<li>(void)tableView:(UITableView <em>)tableView didSelectRowAtIndexPath:(NSIndexPath </em>)indexPath``方法中做个区分。</li>
</ul>
<h3 id="-">向代理发送消息时需要判断其是否实现该方法</h3>
<p>最后，在委托着向代理发送消息的时候，需要判断委托着是否实现了这个代理方法:</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-keyword">if</span> ([<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(signUpViewControllerDidPressSignUpButton:)]) { 
 [<span class="hljs-keyword">self</span>.delegate signUpViewControllerDidPressSignUpButton:<span class="hljs-keyword">self</span>]; 
}</code></pre>
</div>
<h3 id="3-">3. 遵循代理过多的时候，换行对齐显示</h3>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ShopViewController</span> () &lt;<span class="hljs-title">UIGestureRecognizerDelegate</span>,</span>
                                  HXSClickEventDelegate,
                                  <span class="hljs-built_in">UITableViewDelegate</span>,
                                  <span class="hljs-built_in">UITableViewDataSource</span>&gt;</code></pre>
</div>
<h3 id="4-">4. 代理的方法需要明确必须执行和可不执行</h3>
<p>代理方法在默认情况下都是必须执行的，然而在设计一组代理方法的时候，有些方法可以不是必须执行（是因为存在默认配置），这些方法就需要使用<code>@optional</code>关键字来修饰：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">ZOCServiceDelegate</span> &lt;<span class="hljs-title">NSObject</span>&gt;@<span class="hljs-title">optional</span>- (<span class="hljs-title">void</span>)<span class="hljs-title">generalService</span>:(<span class="hljs-title">ZOCGeneralService</span> *)<span class="hljs-title">service</span> <span class="hljs-title">didRetrieveEntries</span>:(<span class="hljs-title">NSArray</span> *)<span class="hljs-title">entries</span>; </span>
<span class="hljs-keyword">@end</span></code></pre>
</div>
<h2 id="-">类</h2>
<hr />

<h3 id="1-">1. 类的名称应该以三个大写字母为前缀；创建子类的时候，应该把代表子类特点的部分放在前缀和父类名的中间</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>
<span>//父类</span>
ZOCSalesListViewController

<span>//子类</span>
ZOCDaySalesListViewController
ZOCMonthSalesListViewController</code></pre>
</div>
<h3 id="2-initializer-dealloc">2. initializer &amp;&amp; dealloc</h3>
<p>推荐：</p>
<ul>
<li>将 dealloc 方法放在实现文件的最前面</li>
<li>将init方法放在dealloc方法后面。如果有多个初始化方法，应该将指定初始化方法放在最前面，其他初始化方法放在其后。</li>
</ul>
<h4 id="2-1-dealloc-">2.1 dealloc方法里面应该直接访问实例变量，不应该用点语法访问</h4>
<h4 id="2-2-init-">2.2 init方法的写法：</h4>
<ul>
<li>init方法返回类型必须是instancetype，不能是id。</li>
<li>必须先实现[super init]。</li>
</ul>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">instancetype</span>)init 
{ 
    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init]; <span>// call the designated initializer </span>
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) { 
        <span>// Custom initialization </span>
    } 
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>; 
}</code></pre>
</div>
<h4 id="2-3-">2.3 指定初始化方法</h4>
<p>指定初始化方法(designated initializer)是提供所有的（最多的）参数的初始化方法，间接初始化方法(secondary initializer)有一个或部分参数的初始化方法。</p>
<p>注意事项1：间接初始化方法必须调用指定初始化方法。</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ZOCEvent</span> </span>

<span>//指定初始化方法</span>
- (<span class="hljs-keyword">instancetype</span>)initWithTitle:(<span class="hljs-built_in">NSString</span> *)title date:(<span class="hljs-built_in">NSDate</span> *)date 
location:(<span class="hljs-built_in">CLLocation</span> *)location
{ 
    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init]; 
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) {
         _title = title; 
         _date = date; 
         _location = location; 
      } 
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>; 
} 

<span>//间接初始化方法</span>
-  (<span class="hljs-keyword">instancetype</span>)initWithTitle:(<span class="hljs-built_in">NSString</span> *)title date:(<span class="hljs-built_in">NSDate</span> *)date
{ 
    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> initWithTitle:title date:date location:<span class="hljs-literal">nil</span>];
}

<span>//间接初始化方法</span>
-  (<span class="hljs-keyword">instancetype</span>)initWithTitle:(<span class="hljs-built_in">NSString</span> *)title 
{ 
    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> initWithTitle:title date:[<span class="hljs-built_in">NSDate</span> date] location:<span class="hljs-literal">nil</span>];
}
 <span class="hljs-keyword">@end</span></code></pre>
</div>
<p>注意事项2：如果直接父类有指定初始化方法，则必须调用其指定初始化方法</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">instancetype</span>)initWithNibName:(<span class="hljs-built_in">NSString</span> *)nibNameOrNil bundle:(<span class="hljs-built_in">NSBundle</span> *)nibBundleOrNil 
{
    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; 
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) {
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>; 
}</code></pre>
</div>
<p>注意事项3：如果想在当前类自定义一个新的全能初始化方法，则需要如下几个步骤</p>
<ol>
<li>定义新的指定初始化方法，并确保调用了直接父类的初始化方法。</li>
<li>重载直接父类的初始化方法，在内部调用新定义的指定初始化方法。</li>
<li>为新的指定初始化方法写文档。</li>
</ol>
<p>看一个标准的例子：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ZOCNewsViewController</span></span>

<span>//新的指定初始化方法</span>
- (<span class="hljs-keyword">id</span>)initWithNews:(ZOCNews *)news 
{
    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> initWithNibName:<span class="hljs-literal">nil</span> bundle:<span class="hljs-literal">nil</span>]; 
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) {
        _news = news;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;
} 

<span>// 重载父类的初始化方法</span>
- (<span class="hljs-keyword">id</span>)initWithNibName:(<span class="hljs-built_in">NSString</span> *)nibNameOrNil bundle:(<span class="hljs-built_in">NSBundle</span> *)nibBundleOrNil{
    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> initWithNews:<span class="hljs-literal">nil</span>]; 
}
<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>在这里，重载父类的初始化方法并在内部调用新定义的指定初始化方法的原因是你不能确定调用者调用的就一定是你定义的这个新的指定初始化方法，而不是原来从父类继承来的指定初始化方法。</p>
<p>假设你没有重载父类的指定初始化方法，而调用者却恰恰调用了父类的初始化方法。那么调用者可能永远都调用不到你自己定义的新指定初始化方法了。</p>
<p>而如果你成功定义了一个新的指定初始化方法并能保证调用者一定能调用它，你最好要在文档中明确写出哪一个才是你定义的新初始化方法。或者你也可以使用编译器指令<code>__attribute__((objc_designated_initializer))</code>来标记它。</p>
<h3 id="3-instancetype">3. 所有返回类对象和实例对象的方法都应该使用instancetype</h3>
<p>将instancetype关键字作为返回值的时候，可以让编译器进行类型检查，同时适用于子类的检查，这样就保证了返回类型的正确性（一定为当前的类对象或实例对象）</p>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ZOCPerson</span></span>
+ (<span class="hljs-keyword">instancetype</span>)personWithName:(<span class="hljs-built_in">NSString</span> *)name; 
<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ZOCPerson</span></span>
+ (<span class="hljs-keyword">id</span>)personWithName:(<span class="hljs-built_in">NSString</span> *)name; 
<span class="hljs-keyword">@end</span></code></pre>
</div>
<h3 id="4-">4. 在类的头文件中尽量少引用其他头文件</h3>
<p>有时，类A需要将类B的实例变量作为它公共API的属性。这个时候，我们不应该引入类B的头文件，而应该使用向前声明（forward declaring）使用class关键字，并且在A的实现文件引用B的头文件。</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span>// EOCPerson.h</span>
<span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span>

<span class="hljs-class"><span class="hljs-keyword">@class</span> <span class="hljs-title">EOCEmployer</span>;</span>

<span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">EOCPerson</span> : <span class="hljs-title">NSObject</span></span>

<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *firstName;
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *lastName;
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) EOCEmployer *employer;<span>//将EOCEmployer作为属性</span>

<span class="hljs-keyword">@end</span>

<span>// EOCPerson.m</span>
<span class="hljs-meta">#import <span class="hljs-meta-string">"EOCEmployer.h"</span></span></code></pre>
</div>
<p>这样做有什么优点呢：</p>
<blockquote>
<ul>
<li>不在A的头文件中引入B的头文件，就不会一并引入B的全部内容，这样就减少了编译时间。</li>
<li>可以避免循环引用：因为如果两个类在自己的头文件中都引入了对方的头文件，那么就会导致其中一个类无法被正确编译。</li>
</ul>
</blockquote>
<p>但是个别的时候，必须在头文件中引入其他类的头文件:</p>
<blockquote>
<p>主要有两种情况：</p>
<ol>
<li>该类继承于某个类，则应该引入父类的头文件。</li>
<li>该类遵从某个协议，则应该引入该协议的头文件。而且最好将协议单独放在一个头文件中。</li>
</ol>
</blockquote>
<h3 id="5-">5. 类的布局</h3>
<div class="highlighter-rouge"><pre class="highlight"><code>
<span class="hljs-meta">#pragma mark - Life Cycle Methods</span>
- (<span class="hljs-keyword">instancetype</span>)init
- (<span class="hljs-keyword">void</span>)dealloc

- (<span class="hljs-keyword">void</span>)viewWillAppear:(<span class="hljs-built_in">BOOL</span>)animated
- (<span class="hljs-keyword">void</span>)viewDidAppear:(<span class="hljs-built_in">BOOL</span>)animated
- (<span class="hljs-keyword">void</span>)viewWillDisappear:(<span class="hljs-built_in">BOOL</span>)animated
- (<span class="hljs-keyword">void</span>)viewDidDisappear:(<span class="hljs-built_in">BOOL</span>)animated

<span class="hljs-meta">#pragma mark - Override Methods</span>

<span class="hljs-meta">#pragma mark - Intial Methods</span>

<span class="hljs-meta">#pragma mark - Network Methods</span>

<span class="hljs-meta">#pragma mark - Target Methods</span>

<span class="hljs-meta">#pragma mark - Public Methods</span>

<span class="hljs-meta">#pragma mark - Private Methods</span>

<span class="hljs-meta">#pragma mark - UITableViewDataSource  </span>
<span class="hljs-meta">#pragma mark - UITableViewDelegate  </span>

<span class="hljs-meta">#pragma mark - Lazy Loads</span>

<span class="hljs-meta">#pragma mark - NSCopying  </span>

<span class="hljs-meta">#pragma mark - NSObject  Methods</span></code></pre>
</div>
<h2 id="-">分类</h2>
<hr />

<h3 id="1-">1. 分类添加的方法需要添加前缀和下划线</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">NSDate</span> (<span class="hljs-title">ZOCTimeExtensions</span>)</span>
 - (<span class="hljs-built_in">NSString</span> *)zoc_timeAgoShort;
<span class="hljs-keyword">@end</span></code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">NSDate</span> (<span class="hljs-title">ZOCTimeExtensions</span>) </span>
- (<span class="hljs-built_in">NSString</span> *)timeAgoShort;
<span class="hljs-keyword">@end</span></code></pre>
</div>
<h3 id="2-">2. 把类的实现代码分散到便于管理的多个分类中</h3>
<p>一个类可能会有很多公共方法，而且这些方法往往可以用某种特有的逻辑来分组。我们可以利用Objecctive-C的分类机制，将类的这些方法按一定的逻辑划入几个分区中。</p>
<p>举个🌰：</p>
<p>先看一个没有使用无分类的类：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>#import &lt;Foundation/Foundation.h&gt;

@interface EOCPerson : NSObject

@property (nonatomic, copy, readonly) NSString *firstName;
@property (nonatomic, copy, readonly) NSString *lastName;
@property (nonatomic, strong, readonly) NSArray *friends;

- (id)initWithFirstName:(NSString*)firstName andLastName:(NSString*)lastName;

/* Friendship methods */
- (void)addFriend:(EOCPerson*)person;
- (void)removeFriend:(EOCPerson*)person;
- (BOOL)isFriendsWith:(EOCPerson*)person;

/* Work methods */
- (void)performDaysWork;
- (void)takeVacationFromWork;

/* Play methods */
- (void)goToTheCinema;
- (void)goToSportsGame;

@end</code></pre>
</div>
<p>分类之后：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>#import &lt;Foundation/Foundation.h&gt;

@interface EOCPerson : NSObject

@property (nonatomic, copy, readonly) NSString *firstName;
@property (nonatomic, copy, readonly) NSString *lastName;
@property (nonatomic, strong, readonly) NSArray *friends;

- (id)initWithFirstName:(NSString*)firstName

andLastName:(NSString*)lastName;

@end

@interface EOCPerson (Friendship)

- (void)addFriend:(EOCPerson*)person;
- (void)removeFriend:(EOCPerson*)person;
- (BOOL)isFriendsWith:(EOCPerson*)person;

@end

@interface EOCPerson (Work)

- (void)performDaysWork;
- (void)takeVacationFromWork;

@end

@interface EOCPerson (Play)

- (void)goToTheCinema;
- (void)goToSportsGame;

@end</code></pre>
</div>
<p>其中，FriendShip分类的实现代码可以这么写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>
// EOCPerson+Friendship.h
#import "EOCPerson.h"

@interface EOCPerson (Friendship)

- (void)addFriend:(EOCPerson*)person;
- (void)removeFriend:(EOCPerson*)person;
- (BOOL)isFriendsWith:(EOCPerson*)person;

@end

// EOCPerson+Friendship.m
#import "EOCPerson+Friendship.h"

@implementation EOCPerson (Friendship)

- (void)addFriend:(EOCPerson*)person 
{
   /* ... */
}

- (void)removeFriend:(EOCPerson*)person 
{
   /* ... */
}

- (BOOL)isFriendsWith:(EOCPerson*)person 
{
   /* ... */
}

@end</code></pre>
</div>
<blockquote>
<p>注意：在新建分类文件时，一定要引入被分类的类文件。</p>
</blockquote>
<p>通过分类机制，可以把类代码分成很多个易于管理的功能区，同时也便于调试。因为分类的方法名称会包含分类的名称，可以马上看到该方法属于哪个分类中。</p>
<p>利用这一点，我们可以创建名为Private的分类，将所有私有方法都放在该类里。这样一来，我们就可以根据private一词的出现位置来判断调用的合理性，这也是一种编写“自我描述式代码（self-documenting）”的办法。</p>
<h2 id="-">单例</h2>
<hr />

<h3 id="1-">1. 单例不能作为容器对象来使用</h3>
<p>单例对象不应该暴露出任何属性，也就是说它不能作为让外部存放对象的容器。它应该是一个处理某些特定任务的工具，比如在iOS中的GPS和加速度传感器。我们只能从他们那里得到一些特定的数据。</p>
<h3 id="2-dispatch_once-">2. 使用dispatch_once来生成单例</h3>
<p>推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>+ (<span class="hljs-keyword">instancetype</span>)sharedInstance 
{ 
 <span class="hljs-keyword">static</span> <span class="hljs-keyword">id</span> sharedInstance = <span class="hljs-literal">nil</span>; 
 <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken = <span class="hljs-number">0</span>;
       <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^{ 
  sharedInstance = [[<span class="hljs-keyword">self</span> alloc] init];
  }); 
 <span class="hljs-keyword">return</span> sharedInstance; 
}</code></pre>
</div>
<p>不推荐这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>+ (<span class="hljs-keyword">instancetype</span>)sharedInstance 
{ 
 <span class="hljs-keyword">static</span> <span class="hljs-keyword">id</span> sharedInstance; 
 <span class="hljs-keyword">@synchronized</span>(<span class="hljs-keyword">self</span>) { 
 <span class="hljs-keyword">if</span> (sharedInstance == <span class="hljs-literal">nil</span>) {  sharedInstance = [[MyClass alloc] init]; 
 } } 
 <span class="hljs-keyword">return</span> sharedInstance; 
}</code></pre>
</div>
<h2 id="-">相等性的判断</h2>
<hr />

<p>判断两个person类是否相等的合理做法：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>-  (<span class="hljs-built_in">BOOL</span>)isEqual:(<span class="hljs-keyword">id</span>)object 
{

     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span> == object) {  
            <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>; <span>//判断内存地址</span>
    } 

    <span class="hljs-keyword">if</span> (![object isKindOfClass:[ZOCPerson <span class="hljs-keyword">class</span>]]) { 
     <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>; <span>//是否为当前类或派生类 </span>
     } 

     <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> isEqualToPerson:(ZOCPerson *)object]; 

}

<span>//自定义的判断相等性的方法</span>
-  (<span class="hljs-built_in">BOOL</span>)isEqualToPerson:(Person *)person 
{ 
        <span class="hljs-keyword">if</span> (!person) {  
              <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;
        } 
        <span class="hljs-built_in">BOOL</span> namesMatch = (!<span class="hljs-keyword">self</span>.name &amp;&amp; !person.name) || [<span class="hljs-keyword">self</span>.name isEqualToString:person.name]; 
        <span class="hljs-built_in">BOOL</span> birthdaysMatch = (!<span class="hljs-keyword">self</span>.birthday &amp;&amp; !person.birthday) || [<span class="hljs-keyword">self</span>.birthday isEqualToDate:person.birthday]; 
        <span class="hljs-keyword">return</span> haveEqualNames &amp;&amp; haveEqualBirthdays; 
}</code></pre>
</div>
<h2 id="-">方法文档</h2>
<hr />

<p>一个函数(方法)必须有一个字符串文档来解释，除非它：</p>
<ul>
<li>非公开，私有函数。</li>
<li>很短。</li>
<li>显而易见。</li>
</ul>
<p>而其余的，包括公开接口，重要的方法，分类，以及协议，都应该伴随文档（注释）：</p>
<ul>
<li>以/开始</li>
<li>第二行识总结性的语句</li>
<li>第三行永远是空行</li>
<li>在与第二行开头对齐的位置写剩下的注释。</li>
</ul>
<p>建议这样写：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>/This comment serves to demonstrate the format of a doc string.

Note that the summary line is always at most one line <span class="hljs-keyword">long</span>, and after the opening block comment,
and each line of text is preceded by a single space.
*/</code></pre>
</div>
<p>看一个指定初始化方法的注释：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>/ 
  *  Designated initializer. *
  *  @param store The store <span class="hljs-keyword">for</span> CRUD operations.
  *  @param searchService The search service used to query the store. 
  *  @return A ZOCCRUDOperationsStore object.
  */ 
- (<span class="hljs-keyword">instancetype</span>)initWithOperationsStore:(<span class="hljs-keyword">id</span>&lt;ZOCGenericStoreProtocol&gt;)store searchService:(<span class="hljs-keyword">id</span>&lt;ZOCGenericSearchServiceProtocol&gt;)searchService;</code></pre>
</div>
<h3 id="-">多用队列，少用同步锁来避免资源抢夺</h3>
<hr />

<p>多个线程执行同一份代码时，很可能会造成数据不同步。建议使用GCD来为代码加锁的方式解决这个问题。</p>
<p>#### 方案一：使用串行同步队列来将读写操作都安排到同一个队列里：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>_syncQueue = dispatch_queue_create(<span class="hljs-string">"com.effectiveobjectivec.syncQueue"</span>, NULL);

<span>//读取字符串</span>
- (NSString*)someString 
{

         __block NSString *localSomeString;
         dispatch_sync(_syncQueue, ^{
            localSomeString = _someString;
        });
         <span class="hljs-keyword">return</span> localSomeString;

}

<span>//设置字符串</span>
- (<span class="hljs-keyword">void</span>)setSomeString:(NSString*)someString 
{

     dispatch_sync(_syncQueue, ^{
        _someString = someString;
    });
}</code></pre>
</div>
<p>这样一来，读写操作都在串行队列进行，就不容易出错。</p>
<p>但是，还有一种方法可以让性能更高：</p>
<p>#### 方案二：将写操作放入栅栏快中，让他们单独执行；将读取操作并发执行。</p>
<div class="highlighter-rouge"><pre class="highlight"><code>_syncQueue = dispatch_queue_create(<span class="hljs-string">"com.custom.queue"</span>, DISPATCH_QUEUE_CONCURRENT);

<span>//读取字符串</span>
- (NSString*)someString 
{

     __block NSString *localSomeString;
     dispatch_sync(_syncQueue, ^{
        localSomeString = _someString;
    });
     <span class="hljs-keyword">return</span> localSomeString;
}</code></pre>
</div>
<div class="highlighter-rouge"><pre class="highlight"><code><span>//设置字符串</span>
- (<span class="hljs-keyword">void</span>)setSomeString:(NSString*)someString 
{

     dispatch_barrier_async(_syncQueue, ^{
        _someString = someString;
    });

}</code></pre>
</div>
<blockquote>
<p>显然，数据的正确性主要取决于写入操作，那么只要保证写入时，线程是安全的，那么即便读取操作是并发的，也可以保证数据是同步的。</p>
<p>这里的<code>dispatch_barrier_async</code>方法使得操作放在了同步队列里“有序进行”，保证了写入操作的任务是在串行队列里。</p>
</blockquote>
<h2 id="-description-">实现description方法打印自定义对象信息</h2>
<hr />

<p>在打印我们自己定义的类的实例对象时，在控制台输出的结果往往是这样的：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>object = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">EOCPerson:</span> <span class="hljs-attr">0x7fd9a1600600</span>&gt;</span></span></code></pre>
</div>
<blockquote>
<p>这里只包含了类名和内存地址，它的信息显然是不具体的,远达不到调试的要求。</p>
</blockquote>
<p>但是！如果在我们自己定义的类覆写description方法，我们就可以在打印这个类的实例时输出我们想要的信息。</p>
<p>例如：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>
- (NSString*)description 
{
     return [NSString stringWithFormat:@"&lt;%@: %p, %@ %@&gt;", [self class], self, firstName, lastName];
}</code></pre>
</div>
<p>在这里，显示了内存地址，还有该类的所有属性。</p>
<p>而且，如果我们将这些属性值放在字典里打印，则更具有可读性：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (NSString*)description 
{

     return [NSString stringWithFormat:@"&lt;%@: %p, %@&gt;",[self class],self,

    @{    @"title":_title,
       @"latitude":@(_latitude),
      @"longitude":@(_longitude)}
    ];
}</code></pre>
</div>
<p>输出结果：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>location = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">EOCLocation:</span> <span class="hljs-attr">0x7f98f2e01d20</span>, {

    <span class="hljs-attr">latitude</span> = <span class="hljs-string">"51.506"</span>;
   <span class="hljs-attr">longitude</span> = <span class="hljs-string">0;</span>
       <span class="hljs-attr">title</span> = <span class="hljs-string">London;</span>
}&gt;</span></span></code></pre>
</div>
<blockquote>
<p>我们可以看到，通过重写<code>description</code>方法可以让我们更加了解对象的情况，便于后期的调试，节省开发时间。</p>
</blockquote>
<h2 id="nsarray-nsmutablearray">NSArray&amp; NSMutableArray</h2>
<hr />

<h3 id="1-addobject-">1. addObject之前要非空判断。</h3>
<h3 id="2-">2. 取下标的时候要判断是否越界。</h3>
<h3 id="3-firtstobject-lastobject">3. 取第一个元素或最后一个元素的时候使用firtstObject和lastObject</h3>
<h2 id="nscache">NSCache</h2>
<hr />

<h3 id="1-nscache-nsdictionary">1. 构建缓存时选用NSCache 而非NSDictionary</h3>
<p>如果我们缓存使用得当，那么应用程序的响应速度就会提高。只有那种“重新计算起来很费事的数据，才值得放入缓存”，比如那些需要从网络获取或从磁盘读取的数据。</p>
<p>在构建缓存的时候很多人习惯用NSDictionary或者NSMutableDictionary，但是作者建议大家使用NSCache，它作为管理缓存的类，有很多特点要优于字典，因为它本来就是为了管理缓存而设计的。</p>
<h3 id="2-nscache-nsdictionary-">2. NSCache优于NSDictionary的几点：</h3>
<ul>
<li>当系统资源将要耗尽时，NSCache具备自动删减缓冲的功能。并且还会先删减“最久未使用”的对象。</li>
<li>NSCache不拷贝键，而是保留键。因为并不是所有的键都遵从拷贝协议（字典的键是必须要支持拷贝协议的，有局限性）。</li>
<li>NSCache是线程安全的：不编写加锁代码的前提下，多个线程可以同时访问NSCache。</li>
</ul>
<h2 id="nsnotification">NSNotification</h2>
<hr />

<h3 id="1-">1. 通知的名称</h3>
<p>建议将通知的名字作为常量，保存在一个专门的类中：</p>
<div class="highlighter-rouge"><pre class="highlight"><code><span>// Const.h</span>
<span class="hljs-keyword">extern</span> <span class="hljs-built_in">NSString</span> * <span class="hljs-keyword">const</span> ZOCFooDidBecomeBarNotification

<span>// Const.m</span>
<span class="hljs-built_in">NSString</span> * <span class="hljs-keyword">const</span> ZOCFooDidBecomeBarNotification = <span class="hljs-string">@"ZOCFooDidBecomeBarNotification"</span>;</code></pre>
</div>
<h3 id="2-">2. 通知的移除</h3>
<p>通知必须要在对象销毁之前移除掉。</p>
<h2 id="-">其他</h2>
<hr />

<h3 id="1-xcode-">1. Xcode工程文件的物理路径要和逻辑路径保持一致。</h3>
<h3 id="2-">2. 忽略没有使用变量的编译警告</h3>
<p>对于某些暂时不用，以后可能用到的临时变量，为了避免警告，我们可以使用如下方法将这个警告消除：</p>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-built_in">NSInteger</span>)giveMeFive 
{ 
 <span class="hljs-built_in">NSString</span> *foo; 
 <span class="hljs-meta">#pragma unused (foo) </span>
 <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>; 
}</code></pre>
</div>
<h3 id="3-">3. 手动标明警告和错误</h3>
<h4 id="-">手动明确一个错误：</h4>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-built_in">NSInteger</span>)divide:(<span class="hljs-built_in">NSInteger</span>)dividend by:(<span class="hljs-built_in">NSInteger</span>)divisor 
{ 
 <span class="hljs-meta">#error Whoa, buddy, you need to check for zero here! </span>
 <span class="hljs-keyword">return</span> (dividend / divisor); 
}</code></pre>
</div>
<h4 id="-">手动明确一个警告：</h4>
<div class="highlighter-rouge"><pre class="highlight"><code>- (<span class="hljs-keyword">float</span>)divide:(<span class="hljs-keyword">float</span>)dividend by:(<span class="hljs-keyword">float</span>)divisor 
{ 
 <span class="hljs-meta">#warning Dude, don't compare floating point numbers like this! </span>
     <span class="hljs-keyword">if</span> (divisor != <span class="hljs-number">0.0</span>) { 
        <span class="hljs-keyword">return</span> (dividend / divisor); 
     } <span class="hljs-keyword">else</span> {  
        <span class="hljs-keyword">return</span> NAN; 
 } 
}</code></pre>
</div>
<h1 id="-">参考文献：</h1>
<ol>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2F7645a5ea7f46" target="_blank" rel="nofollow noopener noreferrer">王垠：编程的智慧</a></li>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Ftech.meituan.com%2Fclean-code.html" target="_blank" rel="nofollow noopener noreferrer">美团点评技术团队：聊聊clean code</a></li>
<li><a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Foa414%2Fobjc-zen-book-cn%2F" target="_blank" rel="nofollow noopener noreferrer">禅与 Objective-C 编程艺术</a></li>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fnb%2F6074358" target="_blank" rel="nofollow noopener noreferrer">J_Knight 的文集：iOS - 《Effective Objective-C 2.0》</a></li>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2F08be5b30ff82" target="_blank" rel="nofollow noopener noreferrer">蝴蝶之梦天使：iOS代码编程规范-根据项目经验汇总</a></li>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2F003f2d777ee8" target="_blank" rel="nofollow noopener noreferrer">高家二少爷：Objective-C高质量代码参考规范</a></li>
</ol>

:ET